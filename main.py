#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import subprocess
import threading
import zipfile
import shutil
import traceback
import time
import socket
from datetime import datetime
import platform
import base64
import io
base64_string = """"""
# Функции для работы с иконками
def create_ico_from_png():
    print("✅ Icon is built into the code as BASE64 - no external file needed")
    return True

def check_icon_file():
    """Проверяет наличие встроенной иконки в BASE64"""
    try:
        # Проверяем, что BASE64 строка доступна
        if 'base64_string' in globals() and base64_string:
            print(f"✅ Built-in icon found in BASE64")
            print(f"   Size: {len(base64_string)} characters")
            return True
        else:
            print(f"❌ Built-in icon not found in BASE64")
            return False
    except Exception as e:
        print(f"❌ Error checking built-in icon: {e}")
        return False

def ensure_ico_exists():
    """Обеспечивает наличие встроенной иконки"""
    if not check_icon_file():
        print("Warning: Built-in icon not available")
        return False
    return True

def ensure_npm_cli(node_dir, logger=None):
    """
    Ensure npm-cli.js exists inside provided embedded node_dir.
    If absent, attempt to download and extract npm into node_dir/node_modules/npm.
    Returns the path to npm-cli.js (may not exist if bootstrap failed).
    """
    import os, urllib.request, io, tarfile
    try:
        candidates = [
            os.path.join(node_dir, "node_modules", "npm", "bin", "npm-cli.js"),
            os.path.join(node_dir, "lib", "node_modules", "npm", "bin", "npm-cli.js"),
            os.path.join(node_dir, "npm-cli.js"),
            os.path.join(node_dir, "bin", "npm-cli.js"),
        ]
        for p in candidates:
            if os.path.exists(p):
                return p
        try:
            if logger: logger.log("npm not found in embedded Node — downloading npm package...", "WARNING")
            npm_tgz_url = "https://registry.npmjs.org/npm/-/npm-10.8.2.tgz"
            with urllib.request.urlopen(npm_tgz_url, timeout=30) as resp:
                data = resp.read()
            tf = tarfile.open(fileobj=io.BytesIO(data), mode="r:gz")
            dest = os.path.join(node_dir, "node_modules", "npm")
            os.makedirs(dest, exist_ok=True)
            prefix = "package/"
            for member in tf.getmembers():
                name = member.name
                if name.startswith(prefix):
                    member.name = name[len(prefix):]
                else:
                    member.name = name
                if member.name in ("", "."):
                    continue
                try:
                    tf.extract(member, path=dest)
                except Exception:
                    continue
            cli = os.path.join(dest, "bin", "npm-cli.js")
            if os.path.exists(cli):
                if logger: logger.log(f"Bootstrapped npm to {cli}", "SUCCESS")
                return cli
        except Exception as e:
            if logger: logger.log(f"Failed to bootstrap npm: {e}", "ERROR")
    except Exception:
        pass
    return os.path.join(node_dir, "node_modules", "npm", "bin", "npm-cli.js")

# GUI library
try:
    import customtkinter as ctk
except Exception:
    print("Please install customtkinter: pip install customtkinter")
    sys.exit(1)
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk, simpledialog

# Image handling
try:
    from PIL import Image, ImageTk
except Exception:
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "Pillow"], startupinfo=get_hidden_startupinfo())
        from PIL import Image, ImageTk
    except Exception:
        Image = None
        ImageTk = None
# HTTP
try:
    import requests
except Exception:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"], startupinfo=get_hidden_startupinfo())
    import requests
# clipboard
try:
    import pyperclip
except Exception:
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyperclip"], startupinfo=get_hidden_startupinfo())
        import pyperclip
    except Exception:
        class _PyperclipStub:
            @staticmethod
            def copy(text):
                print("pyperclip not installed; cannot copy.")
        pyperclip = _PyperclipStub()
# Process handling for cleanup
try:
    import psutil
except Exception:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "psutil"], startupinfo=get_hidden_startupinfo())
    import psutil
# ------------------------
# Utilities
# ------------------------
def get_hidden_startupinfo():
    """Создает startupinfo для скрытия консольного окна в Windows"""
    startupinfo = None
    if platform.system() == "Windows":
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        startupinfo.wShowWindow = subprocess.SW_HIDE
    return startupinfo

def safe_makedirs(path):
    try:
        os.makedirs(path, exist_ok=True)
    except Exception as e:
        print(f"Failed to create directory {path}: {e}")
def human_size(num):
    try:
        n = float(num)
    except Exception:
        return "?"
    for unit in ("Б", "КБ", "МБ", "ГБ", "ТБ"):
        if n < 1024.0:
            return f"{n:3.1f}{unit}"
        n /= 1024.0
    return f"{n:.1f}ПБ"
def kill_processes_by_name(name):
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if name.lower() in (proc.info.get('name') or "").lower():
                proc.terminate()
                proc.wait(timeout=3)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# ------------------------
# Translations (EN -> RU)
# ------------------------
TRANSLATIONS = {
    "Project type:": "Тип проекта:",
    "Load Project": "Загрузить проект",
    "Build:": "Тип сборки:",
    "⚡ Build": "⚡ Собрать",
    "No project loaded": "Проект не загружен",
    "Keystore (for signed builds):": "Keystore (для подписанных сборок):",
    "Not selected": "Не выбран",
    "Select Keystore": "Выбрать Keystore",
    "Create Keystore": "Создать Keystore",
    "Choose": "Выбрать",
    "Create": "Создать",
    "Clear": "Очистить",
    "Manual Actions": "Ручные действия",
    "Open dependencies folder": "Открыть папку зависимостей",
    "Re-check deps": "Проверить зависимости",
    "Clear logs": "Очистить логи",
    "Logs (compact)": "Логи (компактно)",
    "Save Logs": "Сохранить логи",
    "Copy Logs": "Копировать логи",
    "Open log folder": "Открыть папку логов",
    "Tip: For Cordova, upload a ZIP with config.xml at root. For Android Studio, select project folder with gradlew.": 
        "Подсказка: Для Cordova загрузите ZIP с config.xml в корне. Для Android Studio выберите папку с gradlew.",
    "Ready": "Готово к загрузке проекта",
    "Language": "Язык",
    "Delete all project folders": "Удалить все папки проектов",
    "Cordova": "Cordova",
    "Android Studio": "Android Studio",
    "Debug APK": "Отладочный APK",
    "Unsigned Release APK": "Неподписанный релиз APK",
    "Unsigned AAB": "Неподписанный AAB",
    "Signed Debug APK": "Подписанный отладочный APK",
    "Signed Release APK": "Подписанный релиз APK",
    "Signed AAB": "Подписанный AAB",
    "Application started": "Приложение запущено",
    "Checking dependencies...": "Проверяю зависимости...",
    "Missing: {name} ({path})": "Не найдено: {name} ({path})",
    "Found: {name} ({path})": "Найдено: {name} ({path})",
    "Will install: {list}": "Установлю: {list}",
    "Installing dependency: {name}": "Устанавливаю: {name}",
    "Downloading {description} from {url}": "Скачиваю {description} из {url}",
    "Downloaded {description} → {path}": "Скачано {description} → {path}",
    "Extracting {description} to {target}...": "Распаковка {description} в {target}...",
    "{description} installed to {target}": "{description} установлено в {target}",
    "Flattening inner directory {inner} → {dir}": "Выравниваю вложенную папку {inner} → {dir}",
    "Installed Node.js: {version}": "Node.js установлен: {version}",
    "Installed JDK: {version}": "JDK установлен: {version}",
    "Android SDK command-line tools installed to {path}": "Android SDK установлен в {path}",
    "Created license file: {fname}": "Создан файл лицензии: {fname}",
    "License file exists: {fname}": "Файл лицензии уже есть: {fname}",
    "Accepting Android SDK licenses (writing license files + interactive sdkmanager)...": "Принимаю лицензии Android SDK (пишу файлы + запускаю sdkmanager)...",
    "sdkmanager accepted licenses (interactive)": "sdkmanager принял лицензии (интерактивно)",
    "Installing Android SDK components (build-tools, platforms, platform-tools)...": "Установка компонентов Android SDK (build-tools, platforms, platform-tools)...",
    "All dependencies installed and environment configured": "Все зависимости установлены и окружение настроено",
    "Loading Cordova ZIP: {zip}": "Загружаю Cordova ZIP: {zip}",
    "Cordova project loaded and validated (config.xml found)": "Cordova проект загружен и валиден (config.xml найден)",
    "Build started: {mode} for {ptype}": "Запущена сборку: {mode} для {ptype}",
    "Using Cordova command: {cmd}": "Используется Cordova: {cmd}",
    "Adding Android platform to Cordova (if missing)...": "Добавляю платформу Android в Cordova (если нужно)...",
    "Running Cordova build: {cmd}": "Запускаю Cordova build: {cmd}",
    "Found build artifacts: {paths}": "Найдено артефактов: {paths}",
    "Artifact ready: {path} (size {size})": "Готов артефакт: {path} (размер {size})",
    "Signing APK: {path}": "Подписываю APK: {path}",
    "APK signed: {path}": "APK подписан: {path}",
    "Signing AAB: {path}": "Подписываю AAB: {path}",
    "AAB signed with jarsigner: {path}": "AAB подписан jarsigner: {path}",
    "Command finished successfully (code {rc})": "Команда выполнена успешно (код {rc})",
    "Command finished with code {rc}": "Команда завершилась с кодом {rc}",
    "Error: {err}": "Ошибка: {err}",
    "Warning: {warn}": "Предупреждение: {warn}",
    "Keystore selected: {path}": "Keystore выбран: {path}",
    "Keystore created: {path}": "Keystore создан: {path}",
    "Keystore cleared": "Keystore очищен",
    "Logs saved: {path}": "Логи сохранены: {path}",
    "Language changed to {language}": "Язык переключен на {language}",
    "English": "English",
    "Russian": "Русский",
    "Installing Cordova CLI locally": "Устанавливаю Cordova CLI локально",
    "Cordova CLI installed: {version}": "Cordova CLI установлен: {version}",
    "Create a new keystore": "Создать новый keystore",
    "First and Last Name": "Имя и Фамилия",
    "Organizational Unit": "Подразделение организации",
    "Organization": "Организация",
    "City or Locality": "Город или Местность",
    "State or Province": "Штат или Провинция",
    "Country Code (XX)": "Код страны (XX)",
    "Alias": "Псевдоним",
    "Validity (years)": "Срок действия (лет)",
    "Keystore Password": "Пароль keystore",
    "Confirm Password": "Подтвердите пароль",
    "Key Password (optional, if different)": "Пароль ключа (опционально, если отличается)",
    "Cancel": "Отмена",
    "Help": "Помощь",
    "Passwords do not match": "Пароли не совпадают",
    "Fill all required fields": "Заполните все обязательные поля",
    "Keystore creation failed": "Создание keystore провалено",
    "No keystore configured for signed build": "Keystore не настроен для подписанной сборки",
    "Signing": "Подпись",
    "Keystore": "Хранилище ключей",
    "Download Info": "Информация о загрузке",
    "Speed: {speed}": "Скорость: {speed}",
    "ETA: {eta}": "Осталось: {eta}",
    "Speed: --": "Скорость: --",
    "ETA: --": "Осталось: --",
    "Removing dependencies...": "Удаляю зависимости...",
    "Starting dependency reinstallation...": "Начинаю переустановку зависимостей...",
    "Dependencies folder removed": "Папка зависимостей удалена",
                "Starting dependency check after removal...": "Начинаю проверку зависимостей после удаления...",
            "Error removing dependencies folder: {err}": "Ошибка удаления папки зависимостей: {err}",
            "Error during reinstall: {err}": "Ошибка во время переустановки: {err}",
    "Confirm Delete": "Подтвердить удаление",
    "This will delete all project folders. Continue?": "Это удалит все папки проектов. Продолжить?",
    "Key alias": "Псевдоним ключа",
    "Show passwords": "Показать пароли",
    "Key password (optional)": "Пароль ключа (опционально)",
    "Confirm": "Подтвердить",
    "Validity must be a number": "Срок действия должен быть числом",
    "Checking dependencies...": "Проверка зависимостей...",
    "Installing {dep}...": "Установка {dep}...",
    "Downloading {description}...": "Скачивание {description}...",
    "Downloading {description}... {percent}%": "Скачивание {description}... {percent}%",
    "Download completed": "Скачивание завершено",
    "Extracting {description}... {percent}%": "Распаковка {description}... {percent}%",
    "{description} installed": "{description} установлено",
    "Accepting SDK licenses...": "Принятие лицензий SDK...",
    "Licenses accepted": "Лицензии приняты",
    "Installing component: {comp}...": "Установка компонента: {comp}...",
    "Component {comp} installed": "Компонент {comp} установлен",
    "Loading ZIP archive...": "Загрузка ZIP-архива...",
    "Extracting ZIP archive... {percent}%": "Распаковка ZIP-архива... {percent}%",
    "Preparing project...": "Подготовка проекта...",
    "Project ready for build": "Проект готов к сборке",
    "Project loading error": "Ошибка загрузки проекта",
    "Starting build...": "Начало сборки...",
    "Starting Cordova build...": "Начало сборки Cordova...",
    "Adding Android platform...": "Добавление платформы Android...",
    "Android platform added": "Платформа Android добавлена",
    "Android platform already added": "Платформа Android уже добавлена",
    "Applying patches...": "Применение патчей...",
    "Build: {mode_internal}...": "Сборка: {mode_internal}...",
    "Build completed": "Сборка выполнена",
    "Artifacts found": "Артефакты найдены",
    "Signing completed": "Подпись завершена",
    "Build completed successfully": "Сборка завершена успешно",
    "Starting Android Studio build...": "Начало сборки Android Studio...",
    "Signing APK: {basename}...": "Подпись APK: {basename}...",
    "Signing AAB: {basename}...": "Подпись AAB: {basename}...",
    "Country code must be 2 letters": "Код страны должен состоять из 2 букв",
    "Validity must be positive": "Срок действия должен быть положительным",
    # Добавляем недостающие переводы
    "Error": "Ошибка",
    "Warning": "Предупреждение",
    "Dependencies are still being installed. Wait or re-run after installation.": "Зависимости все еще устанавливаются. Подождите или перезапустите после установки.",
    "No project loaded": "Проект не загружен",
    "Android Studio project loaded and validated (gradlew found)": "Проект Android Studio загружен и валиден (gradlew найден)",
    "gradlew not found in folder": "gradlew не найден в папке",
    "config.xml not found in ZIP": "config.xml не найден в ZIP",
    "npm not found in embedded Node — downloading npm package...": "npm не найден во встроенном Node — скачиваю пакет npm...",
    "Bootstrapped npm to {cli}": "npm загружен в {cli}",
    "Failed to bootstrap npm: {e}": "Не удалось загрузить npm: {e}",
    "npm-cli.js not found even after bootstrap": "npm-cli.js не найден даже после загрузки",
    "node.exe not found; cannot install Cordova": "node.exe не найден; невозможно установить Cordova",
    "Cordova installation failed; binary not found": "Установка Cordova провалена; бинарный файл не найден",
    "Cordova installation failed with code {rc}": "Установка Cordova провалена с кодом {rc}",
    "Cordova CLI not found in dependencies": "Cordova CLI не найден в зависимостях",
    "Cordova platform add failed with code {rc}": "Добавление платформы Cordova провалено с кодом {rc}",
    "Android platform already exists": "Платформа Android уже существует",
    "Added import groovy.xml.XmlParser to cordova.gradle": "Добавлен импорт groovy.xml.XmlParser в cordova.gradle",
    "cordova.gradle already patched": "cordova.gradle уже исправлен",
    "cordova.gradle not found, skipping patch": "cordova.gradle не найден, пропускаю исправление",
    "Cordova build failed with code {rc}": "Сборка Cordova провалена с кодом {rc}",
    "Gradle build failed with code {rc}": "Сборка Gradle провалена с кодом {rc}",
    "Keystore not configured for signed build": "Keystore не настроен для подписанной сборки",
    "zipalign not found": "zipalign не найден",
    "zipalign failed; continuing with original apk": "zipalign провален; продолжаю с оригинальным apk",
    "apksigner not found": "apksigner не найден",
    "apksigner returned {rc}": "apksigner вернул {rc}",
    "jarsigner not found": "jarsigner не найден",
    "jarsigner returned {rc}": "jarsigner вернул {rc}",
    "Command timeout": "Команда превысила время ожидания",
    "Executing: {cmd}": "Выполняется: {cmd}",
    "Environment variables configured:": "Переменные окружения настроены:",
    "JAVA_HOME: {path}": "JAVA_HOME: {path}",
    "ANDROID_HOME: {path}": "ANDROID_HOME: {path}",
    "GRADLE_HOME: {path}": "GRADLE_HOME: {path}",
    "PATH (prefix): {path}": "PATH (префикс): {path}",
    "Environment setup complete": "Настройка окружения завершена",
    "sdkmanager not found, skipping interactive license acceptance": "sdkmanager не найден, пропускаю интерактивное принятие лицензий",
    "sdkmanager returned {rc}": "sdkmanager вернул {rc}",
    "sdkmanager not found": "sdkmanager не найден",
    "Installing Android SDK component: {name}": "Установка компонента Android SDK: {name}",
    "{comp} install returned {rc}": "Установка {comp} вернула {rc}",
    "No project folders to delete": "Нет папок проектов для удаления",
    "Deleted all project folders: {path}": "Удалены все папки проектов: {path}",
    "Opening folder: {folder}": "Открываю папку: {folder}",
    "Failed to create log file: {e}": "Не удалось создать файл лога: {e}",
    "pyperclip not installed; cannot copy.": "pyperclip не установлен; невозможно копировать.",
    "Saved logs to: {target}": "Логи сохранены в: {target}",
    "Error updating UI texts: {err}": "Ошибка обновления текстов интерфейса: {err}",
    "Keystore selection incomplete": "Выбор keystore не завершен",
    "Enter keystore password:": "Введите пароль keystore:",
    "Enter key alias:": "Введите псевдоним ключа:",
    "Enter key password (if same as store, leave blank):": "Введите пароль ключа (если такой же как у хранилища, оставьте пустым):",
    "Select Keystore": "Выбрать Keystore",
    "Keystore password": "Пароль keystore",
    "Key alias": "Псевдоним ключа",
    "Key password": "Пароль ключа",
    "Project loaded": "Проект загружен"
}
def translate(template, lang, **kwargs):
    if lang == 'ru' and template in TRANSLATIONS:
        try:
            return TRANSLATIONS[template].format(**kwargs)
        except Exception:
            return TRANSLATIONS[template]
    try:
        return template.format(**kwargs) if kwargs else template
    except Exception:
        return template
# ------------------------
# Logger
# ------------------------
class Logger:
    LEVELS = {
        "DEBUG": "🔍",
        "INFO": "ℹ️",
        "WARNING": "⚠️",
        "ERROR": "❌",
        "SUCCESS": "✅"
    }
    def __init__(self, text_widget, get_lang_callable):
        self.text_widget = text_widget
        self.get_lang = get_lang_callable
        self._ensure_log_file()
        self._setup_tags()
    def _ensure_log_file(self):
        safe_makedirs(os.path.join(os.getcwd(), "logs"))
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.logfile = os.path.join(os.getcwd(), "logs", f"app_{ts}.log")
        try:
            with open(self.logfile, "w", encoding="utf-8") as f:
                f.write(f"=== LOG STARTED AT {datetime.now().isoformat()} ===\n")
        except Exception as e:
            print(f"Failed to create log file: {e}")
    def _setup_tags(self):
        try:
            self.text_widget.tag_config("debug", foreground="gray")
            self.text_widget.tag_config("info", foreground="white")
            self.text_widget.tag_config("warning", foreground="orange")
            self.text_widget.tag_config("error", foreground="red")
            self.text_widget.tag_config("success", foreground="light green")
        except Exception:
            pass
    def _write_file(self, line):
        try:
            with open(self.logfile, "a", encoding="utf-8") as f:
                f.write(line)
        except Exception:
            pass
    def raw(self, line):
        if line is None:
            return
        if isinstance(line, bytes):
            try:
                line = line.decode("utf-8", errors="replace")
            except Exception:
                line = str(line)
        if not line.endswith("\n"):
            line = line + "\n"
        ts = datetime.now().strftime("%H:%M:%S")
        out = f"[{ts}] {line}"
        try:
            self.text_widget.configure(state="normal")
            self.text_widget.insert("end", out, "debug")
            self.text_widget.configure(state="disabled")
            self.text_widget.see("end")
        except Exception:
            print(out, end="")
        self._write_file(out)
    def log(self, template, level="INFO", **kwargs):
        level = level.upper()
        prefix = self.LEVELS.get(level, "•")
        ts = datetime.now().strftime("%H:%M:%S")
        lang = self.get_lang() or 'en'
        try:
            eng = template.format(**kwargs) if kwargs else template
        except Exception:
            eng = template
        loc = translate(template, lang, **kwargs)
        ui_line = f"[{ts}] {prefix} {loc}\n"
        file_line = f"[{ts}] {prefix} {eng} -> {loc}\n"
        try:
            self.text_widget.configure(state="normal")
            tag = level.lower() if level.lower() in ("debug", "info", "warning", "error", "success") else None
            if tag:
                self.text_widget.insert("end", ui_line, tag)
            else:
                self.text_widget.insert("end", ui_line)
            self.text_widget.configure(state="disabled")
            self.text_widget.see("end")
        except Exception:
            print(ui_line, end="")
        self._write_file(file_line)
    def export(self, main_app=None):
        try:
            if main_app:
                # Use native dialog if main app is provided
                target = filedialog.asksaveasfilename(
                    title="Save Logs",
                    defaultextension=".log",
                    filetypes=[("Log files", "*.log"), ("All files", "*.*")]
                )
            else:
                # Fallback to native dialog
                target = filedialog.asksaveasfilename(
                    title="Save Logs",
                    defaultextension=".log",
                    filetypes=[("Log files", "*.log"), ("All files", "*.*")]
                )
            if not target:
                return
            shutil.copyfile(self.logfile, target)
            self.log("Logs saved: {path}", "SUCCESS", path=target)
            if main_app:
                main_app._show_message("Logs", f"Saved logs to: {target}", "info")
            else:
                # Create native message box
                messagebox.showinfo("Logs", f"Saved logs to: {target}")
        except Exception as e:
            self.log("Error: {err}", "ERROR", err=str(e))
    def copy(self):
        try:
            content = self.text_widget.get("1.0", "end")
            pyperclip.copy(content)
            self.log("Copy Logs", "SUCCESS")
        except Exception as e:
            self.log("Error: {err}", "ERROR", err=str(e))
    def clear_ui(self):
        try:
            self.text_widget.configure(state="normal")
            self.text_widget.delete("1.0", "end")
            self.text_widget.configure(state="disabled")
            self.log("Ready", "INFO")
        except Exception:
            pass
# ------------------------
# Custom Dialog Classes
# ------------------------
class CustomMessageBox(ctk.CTkToplevel):
    def __init__(self, parent, title, message, message_type="info", buttons=None, default_button=None):
        super().__init__(parent)
        self.title(title)
        self.result = None
        
        # Set default buttons if none provided
        if buttons is None:
            buttons = ["OK"]
        if default_button is None:
            default_button = buttons[0]
            
        # Calculate height based on message length and number of buttons
        message_lines = message.count('\n') + 1
        button_height = 40 if len(buttons) > 1 else 30
        total_height = max(200, 120 + message_lines * 20 + button_height)
        
        self.geometry(f"400x{total_height}")
        self.resizable(False, False)
        self.transient(parent)
        self.grab_set()
        
        # Center the dialog
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (400 // 2)
        y = (self.winfo_screenheight() // 2) - (total_height // 2)
        self.geometry(f"400x{total_height}+{x}+{y}")
        
        # Configure grid
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        # Icon and title
        icon_text = "ℹ️" if message_type == "info" else "⚠️" if message_type == "warning" else "❌"
        icon_label = ctk.CTkLabel(self, text=icon_text, font=("Arial", 24))
        icon_label.grid(row=0, column=0, pady=(20, 10))
        
        # Message
        message_label = ctk.CTkLabel(self, text=message, wraplength=350, font=("Arial", 12))
        message_label.grid(row=1, column=0, padx=20, pady=10)
        
        # Buttons frame
        button_frame = ctk.CTkFrame(self)
        button_frame.grid(row=2, column=0, pady=(0, 20))
        
        # Create buttons
        for i, button_text in enumerate(buttons):
            is_default = button_text == default_button
            button = ctk.CTkButton(
                button_frame, 
                text=button_text, 
                command=lambda text=button_text: self._button_clicked(text),
                width=80 if len(buttons) > 1 else 100,
                fg_color="#e74c3c" if button_text == "Yes" else None  # Red for Yes button
            )
            button.pack(side="left" if len(buttons) > 1 else "top", padx=5, pady=5)
            
            # Make default button focused
            if is_default:
                button.focus_set()
        
        # Bind Enter key to default button
        self.bind("<Return>", lambda e: self._button_clicked(default_button))
        self.focus_set()
        
        # Set icon AFTER all widgets are created to prevent interference
        set_window_icon(self)
        
    def _button_clicked(self, button_text):
        self.result = button_text
        self.destroy()
        






# ------------------------
# Main Application
# ------------------------
class MainApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Saturn Builder")
        self.geometry("1160x760")
        self.minsize(980, 640)
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        # Set icon AFTER customtkinter configuration to prevent override
        set_window_icon(self)
        # Directories
        self.BASE = os.path.abspath(os.getcwd())
        self.DEP_DIR = os.path.join(self.BASE, "dependencies")
        self.PROJ_DIR = os.path.join(self.BASE, "projects")
        self.LOGS_DIR = os.path.join(self.BASE, "logs")
        safe_makedirs(self.DEP_DIR)
        safe_makedirs(self.PROJ_DIR)
        safe_makedirs(self.LOGS_DIR)
        # State
        self.lang = 'en'
        self.project_types_internal = ["Cordova", "Android Studio"]
        self.build_types_internal = [
            "Debug APK",
            "Unsigned Release APK",
            "Unsigned AAB",
            "Signed Debug APK",
            "Signed Release APK",
            "Signed AAB"
        ]
        self.project_display_var = tk.StringVar()
        self.build_display_var = tk.StringVar()
        self.project_internal_var = tk.StringVar(value=self.project_types_internal[0])
        self.build_internal_var = tk.StringVar(value=self.build_types_internal[0])
        self.keystore_info = {}
        self.project_loaded = False
        self.project_path = None
        self.dependencies_installed = False
        self._cached_env = None
        self.keystore_dialog = None
        self.welcome_shown = False
        # Веса для прогресс-бара (общий прогресс установки зависимостей)
        self.dependency_weights = {
            "Node.js": 20,
            "JDK": 20,
            "Android SDK command-line tools": 30,
            "Gradle": 15,
            "Cordova CLI": 15
        }
        # Добавленные переменные для улучшенного прогресс-бара
        self.current_progress = 0  # Текущее значение прогресса
        self.target_progress = 0   # Целевое значение прогресса для плавного перехода
        self.progress_animation_id = None # ID анимации для after_cancel
        self.current_task = tk.StringVar(value=self._tr("Ready"))  # Текущая задача
        # Keystore vars
        self.ks_path_var = tk.StringVar(value=self._tr("Not selected"))
        self.alias_var = tk.StringVar()
        self.ks_pass_var = tk.StringVar()
        self.key_pass_var = tk.StringVar()
        self.show_pass_var = tk.BooleanVar(value=False)
        # UI creation
        self._build_ui()
        self.logger = Logger(self.log_widget, self._get_lang)
        self.logger.log("Application started", "INFO")
        
        # Проверяем, нужно ли показать приветственное окно
        self._check_first_run()
        
        self.protocol("WM_DELETE_WINDOW", self._on_closing)
        # Trace for keystore info update
        self.ks_path_var.trace_add("write", self._update_keystore_info)
        self.alias_var.trace_add("write", self._update_keystore_info)
        self.ks_pass_var.trace_add("write", self._update_keystore_info)
        self.key_pass_var.trace_add("write", self._update_keystore_info)
        # Trace for build type to toggle signing section
        self.build_internal_var.trace_add("write", self._toggle_signing_section)
        self._toggle_signing_section()
    def _get_lang(self):
        return self.lang
    def _tr(self, text, **kwargs):
        return translate(text, self.lang, **kwargs)
    def _localize_display(self, key):
        return translate(key, self.lang)
    
    def _show_message(self, title, message, message_type="info"):
        """Show native message box"""
        if message_type == "error":
            messagebox.showerror(title, message)
        elif message_type == "warning":
            messagebox.showwarning(title, message)
        else:
            messagebox.showinfo(title, message)
    
        
    def _check_first_run(self):
        """Проверяет, нужно ли показать приветственное окно при первом запуске"""
        welcome_flag_file = os.path.join(self.BASE, ".welcome_shown")
        
        # Проверяем, есть ли уже установленные зависимости
        node_dir = os.path.join(self.DEP_DIR, "node")
        jdk_dir = os.path.join(self.DEP_DIR, "jdk")
        sdk_tools_dir = os.path.join(self.DEP_DIR, "android-sdk", "cmdline-tools", "latest")
        gradle_dir = os.path.join(self.DEP_DIR, "gradle")
        cordova_dir = os.path.join(self.DEP_DIR, "node", "node_modules", "cordova")
        
        node_exe = os.path.join(node_dir, "node.exe" if platform.system() == "Windows" else "bin/node")
        java_exe = os.path.join(jdk_dir, "bin", "java.exe" if platform.system() == "Windows" else "bin/java")
        sdkmanager_exe = os.path.join(sdk_tools_dir, "bin", "sdkmanager.bat" if platform.system() == "Windows" else "sdkmanager")
        gradle_exe = os.path.join(gradle_dir, "bin", "gradle.bat" if platform.system() == "Windows" else "bin/gradle")
        cordova_exe = os.path.join(cordova_dir, "bin", "cordova")
        
        dependencies_exist = all([
            os.path.exists(node_exe),
            os.path.exists(java_exe),
            os.path.exists(sdkmanager_exe),
            os.path.exists(gradle_exe),
            os.path.exists(cordova_exe)
        ])
        
        # Если зависимости уже установлены, не показываем приветственное окно
        if dependencies_exist:
            self.dependencies_installed = True
            self._setup_environment()
            self.logger.log("All dependencies already installed", "SUCCESS")
            self._set_progress(100, self._tr("Ready"))
            self.after(0, lambda: self.btn_load.configure(state="normal"))
            return
            
        # Если приветственное окно уже показывалось, проверяем зависимости только если они не установлены
        if os.path.exists(welcome_flag_file):
            if not dependencies_exist:
                threading.Thread(target=self.check_dependencies, daemon=True).start()
            else:
                # Зависимости уже установлены, просто настраиваем окружение
                self.dependencies_installed = True
                self._setup_environment()
                self.logger.log("All dependencies already installed", "SUCCESS")
                self._set_progress(100, self._tr("Ready"))
                self.after(0, lambda: self.btn_load.configure(state="normal"))
            return
            
        # Показываем приветственное окно
        self.after(100, self._show_welcome_dialog)
        
    def _show_welcome_dialog(self):
        """Показывает приветственное окно"""
        if self.welcome_shown:
            return
            
        self.welcome_shown = True
        welcome_dialog = WelcomeDialog(self, self._on_welcome_choice)
        
    def _on_welcome_choice(self, choice):
        """Обрабатывает выбор пользователя в приветственном окне"""
        welcome_flag_file = os.path.join(self.BASE, ".welcome_shown")
        
        # Создаем файл-флаг, что приветственное окно было показано
        try:
            with open(welcome_flag_file, "w") as f:
                f.write("1")
        except Exception:
            pass
            
        if choice == "install":
            # Пользователь выбрал установку зависимостей
            self.logger.log("User chose to install dependencies", "INFO")
            threading.Thread(target=self.check_dependencies, daemon=True).start()
        else:
            # Пользователь пропустил установку
            self.logger.log("User chose to skip dependency installation", "INFO")
            self._set_progress(0, self._tr("Ready"))
            # Показываем информационное окно
            self.after(500, lambda: SkipDependenciesDialog(self))
    def _rebuild_optionmenus(self):
        proj_values = [self._localize_display(k) for k in self.project_types_internal]
        self._proj_display_to_internal = {self._localize_display(k): k for k in self.project_types_internal}
        try:
            self.opt_project.configure(values=proj_values)
            current_internal = self.project_internal_var.get()
            self.project_display_var.set(self._localize_display(current_internal))
        except Exception:
            pass
        build_values = [self._localize_display(k) for k in self.build_types_internal]
        self._build_display_to_internal = {self._localize_display(k): k for k in self.build_types_internal}
        try:
            self.opt_build.configure(values=build_values)
            current_internal_b = self.build_internal_var.get()
            self.build_display_var.set(self._localize_display(current_internal_b))
        except Exception:
            pass
    def _build_ui(self):
        pad = 12
        header = ctk.CTkFrame(self, corner_radius=12)
        header.pack(fill="x", padx=pad, pady=(pad, 6))
        self.lbl_project_type = ctk.CTkLabel(header, text=self._tr("Project type:"))
        self.lbl_project_type.pack(side="left", padx=(8, 6))
        self.opt_project = ctk.CTkOptionMenu(header, values=[], variable=self.project_display_var, width=160, command=self._on_project_display_change)
        self.opt_project.pack(side="left", padx=(0, 10))
        self.btn_load = ctk.CTkButton(header, text=f"📂 {self._tr('Load Project')}", width=220, command=self.load_project, state="disabled")
        self.btn_load.pack(side="left", padx=(0, 10))
        self.lbl_build = ctk.CTkLabel(header, text=self._tr("Build:"))
        self.lbl_build.pack(side="left", padx=(6, 6))
        self.opt_build = ctk.CTkOptionMenu(header, values=[], variable=self.build_display_var, width=320, command=self._on_build_display_change)
        self.opt_build.pack(side="left", padx=(0, 10))
        self.btn_build = ctk.CTkButton(header, text=self._tr("⚡ Build"), width=160, fg_color="#2ecc71", command=self.start_build, state="disabled")
        self.btn_build.pack(side="left", padx=(0, 10))
        status_frame = ctk.CTkFrame(self, corner_radius=12)
        status_frame.pack(fill="x", padx=pad, pady=(6, 0))
        # Создаем метку для отображения текущей задачи
        self.task_label = ctk.CTkLabel(status_frame, textvariable=self.current_task, anchor="w", font=("Arial", 12))
        self.task_label.pack(fill="x", padx=10, pady=(5, 0))
        # Стилизация прогресс-бара
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Custom.Horizontal.TProgressbar",
            troughcolor="#2b2b2b",
            bordercolor="#1f1f1f",
            background="#2ecc71",
            lightcolor="#2ecc71",
            darkcolor="#27ae60",
            thickness=12,
            borderwidth=0,
            relief="flat")
        self.progress = ttk.Progressbar(status_frame, orient="horizontal", mode="determinate", style="Custom.Horizontal.TProgressbar")
        self.progress.pack(fill="x", padx=10, pady=(0, 5))
        self.progress["maximum"] = 100
        self._set_progress(0, self._tr("Ready"))
        # Метка для отображения глобального прогресса
        self.global_percent = ctk.CTkLabel(status_frame, text="0%", font=("Arial", 12, "bold"), anchor="e")
        self.global_percent.pack(fill="x", padx=10, pady=(0, 10))
        center = ctk.CTkFrame(self, corner_radius=12)
        center.pack(fill="both", expand=True, padx=pad, pady=(6, pad))
        left = ctk.CTkFrame(center, corner_radius=12)
        left.pack(side="left", fill="both", expand=True, padx=(10, 6), pady=10)
        proj_info = ctk.CTkFrame(left, corner_radius=12)
        proj_info.pack(fill="x", padx=10, pady=8)
        self.project_info_var = tk.StringVar(value=self._tr("No project loaded"))
        ctk.CTkLabel(proj_info, textvariable=self.project_info_var, wraplength=520).pack(padx=8, pady=8)
        self.ks_frame = ctk.CTkFrame(left, corner_radius=12)
        # pack will be managed by _toggle_signing_section
        self.lbl_ks = ctk.CTkLabel(self.ks_frame, text=self._tr("Signing"))
        self.lbl_ks.pack(anchor="w", padx=8, pady=(6, 0))
        ks_path_frame = ctk.CTkFrame(self.ks_frame)
        ks_path_frame.pack(fill="x", padx=8, pady=5)
        self.lbl_ks_path = ctk.CTkLabel(ks_path_frame, text=self._tr("Keystore"))
        self.lbl_ks_path.pack(side="left", padx=5)
        entry_ks_path = ctk.CTkEntry(ks_path_frame, state="readonly", textvariable=self.ks_path_var)
        entry_ks_path.pack(side="left", fill="x", expand=True, padx=5)
        self.btn_choose_ks = ctk.CTkButton(ks_path_frame, text=self._tr("Choose"), width=80, command=self._choose_keystore)
        self.btn_choose_ks.pack(side="left", padx=5)
        self.btn_create_ks = ctk.CTkButton(ks_path_frame, text=self._tr("Create"), width=80, command=self._create_keystore_dialog)
        self.btn_create_ks.pack(side="left", padx=5)
        self.lbl_alias = ctk.CTkLabel(self.ks_frame, text=self._tr("Key alias"))
        self.lbl_alias.pack(anchor="w", padx=8, pady=5)
        entry_alias = ctk.CTkEntry(self.ks_frame, textvariable=self.alias_var)
        entry_alias.pack(fill="x", padx=8, pady=5)
        self.checkbox_show = ctk.CTkCheckBox(self.ks_frame, text=self._tr("Show passwords"), variable=self.show_pass_var, command=self._toggle_show_pass)
        self.checkbox_show.pack(anchor="w", padx=8, pady=5)
        self.lbl_ks_pass = ctk.CTkLabel(self.ks_frame, text=self._tr("Keystore Password"))
        self.lbl_ks_pass.pack(anchor="w", padx=8, pady=5)
        self.entry_ks_pass = ctk.CTkEntry(self.ks_frame, textvariable=self.ks_pass_var, show="*")
        self.entry_ks_pass.pack(fill="x", padx=8, pady=5)
        self.lbl_key_pass = ctk.CTkLabel(self.ks_frame, text=self._tr("Key password (optional)"))
        self.lbl_key_pass.pack(anchor="w", padx=8, pady=5)
        self.entry_key_pass = ctk.CTkEntry(self.ks_frame, textvariable=self.key_pass_var, show="*")
        self.entry_key_pass.pack(fill="x", padx=8, pady=5)
        self.btn_clear_ks = ctk.CTkButton(self.ks_frame, text=self._tr("Clear"), width=100, command=self._clear_keystore)
        self.btn_clear_ks.pack(pady=10, padx=8)
        manual_frame = ctk.CTkFrame(left, corner_radius=12)
        manual_frame.pack(fill="x", padx=10, pady=8)
        man_header = ctk.CTkFrame(manual_frame, corner_radius=8)
        man_header.pack(fill="x", padx=8, pady=8)
        ctk.CTkLabel(man_header, text="⚙️", width=36).pack(side="left", padx=(4, 6))
        self.lbl_manual = ctk.CTkLabel(man_header, text=self._tr("Manual Actions"), font=ctk.CTkFont(size=16, weight="bold"))
        self.lbl_manual.pack(side="left", padx=(2, 12))
        
        # First row of controls
        man_controls_row1 = ctk.CTkFrame(manual_frame, corner_radius=8)
        man_controls_row1.pack(fill="x", padx=8, pady=(0, 6))
        self.btn_open_deps = ctk.CTkButton(man_controls_row1, text=self._tr("Open dependencies folder"), width=230, command=self._open_dependencies)
        self.btn_open_deps.pack(side="left", padx=6, pady=6)
        self.btn_recheck = ctk.CTkButton(man_controls_row1, text=self._tr("Re-check deps"), width=170, command=lambda: threading.Thread(target=self.check_dependencies, daemon=True).start())
        self.btn_recheck.pack(side="left", padx=6, pady=6)
        self.btn_clear_logs = ctk.CTkButton(man_controls_row1, text=self._tr("Clear logs"), width=150, command=lambda: self.logger.clear_ui())
        self.btn_clear_logs.pack(side="left", padx=6, pady=6)
        
        # Second row of controls
        man_controls_row2 = ctk.CTkFrame(manual_frame, corner_radius=8)
        man_controls_row2.pack(fill="x", padx=8, pady=(0, 8))
        self.btn_delete_projects = ctk.CTkButton(man_controls_row2, text=self._tr("Delete all project folders"), width=230, command=self._delete_project_folders, fg_color="#e74c3c")
        self.btn_delete_projects.pack(side="left", padx=6, pady=6)
        

        
        # Language section moved to second row, right side after reinstall button
        lang_frame = ctk.CTkFrame(man_controls_row2, corner_radius=6)
        lang_frame.pack(side="right", padx=6, pady=6)
        self.lang_label = ctk.CTkLabel(lang_frame, text=self._tr("Language"))
        self.lang_label.pack(side="left", padx=(8, 6))
        self.lang_btn_font = ctk.CTkFont(size=14, weight="bold")
        self.lang_btn = ctk.CTkButton(lang_frame, text="English", width=120, height=42, font=self.lang_btn_font, command=self._toggle_language)
        self.lang_btn.pack(side="left", padx=(0, 8))
        self._update_lang_button()
        right = ctk.CTkFrame(center, corner_radius=12)
        right.pack(side="left", fill="both", expand=True, padx=(6, 10), pady=10)
        
        # Download info section
        download_info_frame = ctk.CTkFrame(right, corner_radius=8)
        download_info_frame.pack(fill="x", padx=8, pady=(8, 6))
        ctk.CTkLabel(download_info_frame, text="📥", width=36).pack(side="left", padx=(4, 6))
        ctk.CTkLabel(download_info_frame, text=self._tr("Download Info"), font=ctk.CTkFont(size=14, weight="bold")).pack(side="left", padx=(2, 12))
        
        # Download speed and ETA labels
        self.download_speed_label = ctk.CTkLabel(right, text=self._tr("Speed: --"), font=("Arial", 10))
        self.download_speed_label.pack(anchor="w", padx=12, pady=(0, 2))
        self.download_eta_label = ctk.CTkLabel(right, text=self._tr("ETA: --"), font=("Arial", 10))
        self.download_eta_label.pack(anchor="w", padx=12, pady=(0, 8))
        
        self.lbl_logs = ctk.CTkLabel(right, text=self._tr("Logs (compact)"))
        self.lbl_logs.pack(anchor="w", padx=8, pady=(8, 0))
        self.log_widget = scrolledtext.ScrolledText(right, wrap="word", height=30, bg="#0b0b0b", fg="#e0e0e0", font=("Consolas", 10))
        self.log_widget.pack(fill="both", expand=True, padx=8, pady=8)
        self.log_widget.configure(state="disabled")
        log_btns = ctk.CTkFrame(right, corner_radius=8)
        log_btns.pack(fill="x", padx=8, pady=(0, 8))
        self.btn_save_logs = ctk.CTkButton(log_btns, text=self._tr("Save Logs"), width=140, command=lambda: self.logger.export(self))
        self.btn_save_logs.pack(side="left", padx=6)
        self.btn_copy_logs = ctk.CTkButton(log_btns, text=self._tr("Copy Logs"), width=140, command=lambda: self.logger.copy())
        self.btn_copy_logs.pack(side="left", padx=6)
        self.btn_open_logs = ctk.CTkButton(log_btns, text=self._tr("Open log folder"), width=160, command=self._open_logs_dir)
        self.btn_open_logs.pack(side="left", padx=6)
        footer = ctk.CTkFrame(self, corner_radius=12)
        footer.pack(fill="x", padx=pad, pady=(0, pad))
        self.hint_var = tk.StringVar(value=self._tr("Tip: For Cordova, upload a ZIP with config.xml at root. For Android Studio, select project folder with gradlew."))
        ctk.CTkLabel(footer, textvariable=self.hint_var).pack(anchor="w", padx=10, pady=8)
        self._rebuild_optionmenus()
        self.project_display_var.trace_add("write", self._on_project_display_var_changed)
        self.build_display_var.trace_add("write", self._on_build_display_var_changed)
    def _toggle_signing_section(self, *args):
        if self.build_internal_var.get().startswith("Signed"):
            self.ks_frame.pack(fill="x", padx=10, pady=8)
        else:
            self.ks_frame.pack_forget()
    def _on_project_display_change(self, *args):
        pass
    def _on_build_display_change(self, *args):
        pass
    def _on_project_display_var_changed(self, *args):
        val = self.project_display_var.get()
        internal = self._proj_display_to_internal.get(val, self.project_types_internal[0])
        self.project_internal_var.set(internal)
    def _on_build_display_var_changed(self, *args):
        val = self.build_display_var.get()
        internal = self._build_display_to_internal.get(val, self.build_types_internal[0])
        self.build_internal_var.set(internal)
    def _update_lang_button(self):
        if self.lang == 'en':
            self.lang_btn.configure(text="Русский")
        else:
            self.lang_btn.configure(text="English")
    def _toggle_language(self):
        self.lang = 'ru' if self.lang == 'en' else 'en'
        self._rebuild_optionmenus()
        self._refresh_ui_texts()
        self._update_lang_button()
        lang_name_local = self._tr("Russian") if self.lang == 'ru' else self._tr("English")
        self.logger.log("Language changed to {language}", "INFO", language=lang_name_local)
    def _refresh_ui_texts(self):
        try:
            # Обновляем заголовки и кнопки
            self.btn_load.configure(text=f"📂 {self._tr('Load Project')}")
            self.btn_build.configure(text=self._tr("⚡ Build"))
            self.lbl_manual.configure(text=self._tr("Manual Actions"))
            self.btn_open_deps.configure(text=self._tr("Open dependencies folder"))
            self.btn_recheck.configure(text=self._tr("Re-check deps"))
            self.btn_clear_logs.configure(text=self._tr("Clear logs"))
            self.btn_delete_projects.configure(text=self._tr("Delete all project folders"))
            
            
            # Обновляем надписи в заголовке
            if hasattr(self, 'lbl_project_type'):
                self.lbl_project_type.configure(text=self._tr("Project type:"))
            if hasattr(self, 'lbl_build'):
                self.lbl_build.configure(text=self._tr("Build:"))
            
            # Обновляем надпись "Language"
            if hasattr(self, 'lang_label'):
                self.lang_label.configure(text=self._tr("Language"))
            
            # Обновляем подсказку
            self.hint_var.set(self._tr("Tip: For Cordova, upload a ZIP with config.xml at root. For Android Studio, select project folder with gradlew."))
            
            # Обновляем информацию о проекте
            current_project_info = self.project_info_var.get()
            if current_project_info == "No project loaded" or current_project_info == "Проект не загружен":
                self.project_info_var.set(self._tr("No project loaded"))
            elif current_project_info.startswith("Проект загружен:") or current_project_info.startswith("Project loaded:"):
                # Извлекаем путь и переводим только префикс
                if ":" in current_project_info:
                    path = current_project_info.split(":", 1)[1].strip()
                    self.project_info_var.set(f"{self._tr('Project loaded')}: {path}")
            
            # Обновляем статус keystore
            current_ks = self.ks_path_var.get()
            if current_ks == "Not selected" or current_ks == "Не выбран":
                self.ks_path_var.set(self._tr("Not selected"))
            
            # Обновляем текущую задачу
            current_task = self.current_task.get()
            if current_task and current_task != "Ready" and current_task != "Готово":
                # Пытаемся перевести текущую задачу
                try:
                    self.current_task.set(self._tr(current_task))
                except:
                    pass
            
            # Обновляем заголовки в секции подписи
            if hasattr(self, 'lbl_ks'):
                self.lbl_ks.configure(text=self._tr("Signing"))
            if hasattr(self, 'lbl_ks_path'):
                self.lbl_ks_path.configure(text=self._tr("Keystore"))
            if hasattr(self, 'lbl_alias'):
                self.lbl_alias.configure(text=self._tr("Key alias"))
            if hasattr(self, 'checkbox_show'):
                self.checkbox_show.configure(text=self._tr("Show passwords"))
            if hasattr(self, 'lbl_ks_pass'):
                self.lbl_ks_pass.configure(text=self._tr("Keystore Password"))
            if hasattr(self, 'lbl_key_pass'):
                self.lbl_key_pass.configure(text=self._tr("Key password (optional)"))
            
            # Обновляем кнопки в секции подписи
            if hasattr(self, 'btn_choose_ks'):
                self.btn_choose_ks.configure(text=self._tr("Choose"))
            if hasattr(self, 'btn_create_ks'):
                self.btn_create_ks.configure(text=self._tr("Create"))
            if hasattr(self, 'btn_clear_ks'):
                self.btn_clear_ks.configure(text=self._tr("Clear"))
            
            # Обновляем заголовки в секции логов
            if hasattr(self, 'lbl_logs'):
                self.lbl_logs.configure(text=self._tr("Logs (compact)"))
            
            # Обновляем кнопки в секции логов
            if hasattr(self, 'btn_save_logs'):
                self.btn_save_logs.configure(text=self._tr("Save Logs"))
            if hasattr(self, 'btn_copy_logs'):
                self.btn_copy_logs.configure(text=self._tr("Copy Logs"))
            if hasattr(self, 'btn_open_logs'):
                self.btn_open_logs.configure(text=self._tr("Open log folder"))
            
        except Exception as e:
            self.logger.log("Error updating UI texts: {err}", "ERROR", err=str(e))
    def _toggle_show_pass(self):
        show = "" if self.show_pass_var.get() else "*"
        self.entry_ks_pass.configure(show=show)
        self.entry_key_pass.configure(show=show)
    def _update_keystore_info(self, *args):
        path = self.ks_path_var.get()
        if path != self._tr("Not selected"):
            self.keystore_info["path"] = path
        self.keystore_info["alias"] = self.alias_var.get()
        self.keystore_info["storepass"] = self.ks_pass_var.get()
        self.keystore_info["keypass"] = self.key_pass_var.get() or self.ks_pass_var.get()
    def _choose_keystore(self):
        # Используем стандартный проводник файлов для выбора keystore файлов
        ks = filedialog.askopenfilename(
            title=self._tr("Select Keystore"),
            filetypes=[("Keystore files", "*.jks *.keystore"), ("All files", "*.*")]
        )
        if ks:
            self.ks_path_var.set(ks)
            self.logger.log("Keystore selected: {path}", "SUCCESS", path=ks)
    def _create_keystore_dialog(self):
        if hasattr(self, 'keystore_dialog') and self.keystore_dialog and self.keystore_dialog.winfo_exists():
            self.keystore_dialog.focus()
            return
        self.keystore_dialog = ctk.CTkToplevel(self)
        self.keystore_dialog.title(self._tr("Create a new keystore"))
        self.keystore_dialog.geometry("400x500")
        self.keystore_dialog.resizable(False, False)
        self.keystore_dialog.protocol("WM_DELETE_WINDOW", self._on_keystore_dialog_close)
        pad = 10
        # Scrollable frame for fields
        scroll_frame = ctk.CTkScrollableFrame(self.keystore_dialog)
        scroll_frame.pack(fill="both", expand=True, padx=pad, pady=pad)
        # Поля
        lbl_name = ctk.CTkLabel(scroll_frame, text=self._tr("First and Last Name"))
        lbl_name.pack(pady=(pad, 0), anchor="w")
        entry_name = ctk.CTkEntry(scroll_frame)
        entry_name.pack(fill="x")
        lbl_unit = ctk.CTkLabel(scroll_frame, text=self._tr("Organizational Unit"))
        lbl_unit.pack(pady=(pad, 0), anchor="w")
        entry_unit = ctk.CTkEntry(scroll_frame)
        entry_unit.pack(fill="x")
        lbl_org = ctk.CTkLabel(scroll_frame, text=self._tr("Organization"))
        lbl_org.pack(pady=(pad, 0), anchor="w")
        entry_org = ctk.CTkEntry(scroll_frame)
        entry_org.pack(fill="x")
        lbl_city = ctk.CTkLabel(scroll_frame, text=self._tr("City or Locality"))
        lbl_city.pack(pady=(pad, 0), anchor="w")
        entry_city = ctk.CTkEntry(scroll_frame)
        entry_city.pack(fill="x")
        lbl_state = ctk.CTkLabel(scroll_frame, text=self._tr("State or Province"))
        lbl_state.pack(pady=(pad, 0), anchor="w")
        entry_state = ctk.CTkEntry(scroll_frame)
        entry_state.pack(fill="x")
        lbl_country = ctk.CTkLabel(scroll_frame, text=self._tr("Country Code (XX)"))
        lbl_country.pack(pady=(pad, 0), anchor="w")
        entry_country = ctk.CTkEntry(scroll_frame)
        entry_country.pack(fill="x")
        lbl_alias = ctk.CTkLabel(scroll_frame, text=self._tr("Alias"))
        lbl_alias.pack(pady=(pad, 0), anchor="w")
        entry_alias = ctk.CTkEntry(scroll_frame)
        entry_alias.pack(fill="x")
        lbl_validity = ctk.CTkLabel(scroll_frame, text=self._tr("Validity (years)"))
        lbl_validity.pack(pady=(pad, 0), anchor="w")
        entry_validity = ctk.CTkEntry(scroll_frame)
        entry_validity.pack(fill="x")
        lbl_ks_pass = ctk.CTkLabel(scroll_frame, text=self._tr("Keystore Password"))
        lbl_ks_pass.pack(pady=(pad, 0), anchor="w")
        entry_ks_pass = ctk.CTkEntry(scroll_frame, show="*")
        entry_ks_pass.pack(fill="x")
        lbl_confirm_pass = ctk.CTkLabel(scroll_frame, text=self._tr("Confirm Password"))
        lbl_confirm_pass.pack(pady=(pad, 0), anchor="w")
        entry_confirm_pass = ctk.CTkEntry(scroll_frame, show="*")
        entry_confirm_pass.pack(fill="x")
        lbl_key_pass = ctk.CTkLabel(scroll_frame, text=self._tr("Key Password (optional, if different)"))
        lbl_key_pass.pack(pady=(pad, 0), anchor="w")
        entry_key_pass = ctk.CTkEntry(scroll_frame, show="*")
        entry_key_pass.pack(fill="x")
        # Buttons frame at bottom
        buttons = ctk.CTkFrame(self.keystore_dialog)
        buttons.pack(fill="x", side="bottom", pady=pad, padx=pad)
        btn_create = ctk.CTkButton(buttons, text=self._tr("Confirm"), command=lambda: self._create_keystore(
            self.keystore_dialog, entry_name.get(), entry_unit.get(), entry_org.get(), entry_city.get(), entry_state.get(), entry_country.get(),
            entry_alias.get(), entry_validity.get(), entry_ks_pass.get(), entry_confirm_pass.get(), entry_key_pass.get()
        ))
        btn_create.pack(side="left", padx=pad)
        btn_cancel = ctk.CTkButton(buttons, text=self._tr("Cancel"), command=self._on_keystore_dialog_close)
        btn_cancel.pack(side="left", padx=pad)
        
        # Set icon AFTER all widgets are created to prevent interference
        set_window_icon(self.keystore_dialog)
    def _on_keystore_dialog_close(self):
        if self.keystore_dialog:
            self.keystore_dialog.destroy()
            self.keystore_dialog = None
    def _create_keystore(self, dialog, name, unit, org, city, state, country, alias, validity, ks_pass, confirm_pass, key_pass):
        if ks_pass != confirm_pass:
            self._show_message(self._tr("Error"), self._tr("Passwords do not match"), "error")
            return
        if not all([name, unit, org, city, state, country, alias, validity, ks_pass]):
            self._show_message(self._tr("Error"), self._tr("Fill all required fields"), "error")
            return
        try:
            validity_days = int(validity) * 365
            if validity_days <= 0:
                raise ValueError("Validity must be positive")
        except ValueError:
            self._show_message(self._tr("Error"), self._tr("Validity must be a number"), "error")
            return
        if len(country) != 2:
            self._show_message(self._tr("Error"), self._tr("Country code must be 2 letters"), "error")
            return
        
        # Temporarily disable the dialog to prevent multiple clicks
        dialog.configure(state="disabled")
        
        ks_path = filedialog.asksaveasfilename(
            title=self._tr("Save Keystore"),
            defaultextension=".jks",
            filetypes=[("Keystore", "*.jks")]
        )
        
        # Re-enable the dialog and bring it to front
        dialog.configure(state="normal")
        dialog.focus_force()
        dialog.lift()
        
        # Small delay to ensure proper focus restoration
        dialog.after(100, lambda: dialog.focus_force())
        
        if not ks_path:
            return
        dname = f"CN={name}, OU={unit}, O={org}, L={city}, ST={state}, C={country}"
        keytool = os.path.join(self.DEP_DIR, "jdk", "bin", "keytool.exe" if platform.system() == "Windows" else "keytool")
        cmd = [
            keytool, "-genkey", "-v", "-keystore", ks_path, "-keyalg", "RSA", "-keysize", "2048",
            "-validity", str(validity_days), "-alias", alias, "-dname", dname,
            "-storepass", ks_pass, "-keypass", key_pass or ks_pass
        ]
        rc = self._run_and_stream(cmd)
        if rc == 0:
            self.ks_path_var.set(ks_path)
            self.alias_var.set(alias)
            self.ks_pass_var.set(ks_pass)
            self.key_pass_var.set(key_pass or ks_pass)
            self.logger.log("Keystore created: {path}", "SUCCESS", path=ks_path)
            self._on_keystore_dialog_close()
        else:
            self._show_message(self._tr("Error"), self._tr("Keystore creation failed"), "error")
    def _clear_keystore(self):
        self.ks_path_var.set(self._tr("Not selected"))
        self.alias_var.set("")
        self.ks_pass_var.set("")
        self.key_pass_var.set("")
        self.keystore_info = {}
        self.logger.log("Keystore cleared", "INFO")
    def _animate_progress(self):
        """Плавно изменяет значение прогресс-бара к target_progress."""
        if abs(self.current_progress - self.target_progress) < 0.5: # Порог останова
            self.current_progress = self.target_progress
            self.progress['value'] = self.current_progress
            self.global_percent.configure(text=f"{int(self.current_progress)}%")
            self.progress_animation_id = None
            return

        # Вычисляем шаг анимации (например, 1% за итерацию или 5% разницы)
        step = (self.target_progress - self.current_progress) * 0.1 # 10% разницы за шаг
        if abs(step) < 0.1: # Минимальный шаг
            step = 1 if self.target_progress > self.current_progress else -1
        self.current_progress += step
        self.progress['value'] = self.current_progress
        self.global_percent.configure(text=f"{int(self.current_progress)}%")
        
        # Планируем следующий шаг анимации
        self.progress_animation_id = self.after(20, self._animate_progress) # ~50 FPS

    def _set_progress(self, pct, task=None):
        try:
            # Ограничиваем значение между 0 и 100
            pct = max(0, min(100, pct))
            self.target_progress = pct # Устанавливаем целевое значение
            
            # Останавливаем предыдущую анимацию, если она была
            if self.progress_animation_id:
                self.after_cancel(self.progress_animation_id)
            
            # Запускаем новую анимацию
            self._animate_progress()

            # Обновляем текст текущей задачи
            if task:
                self.current_task.set(task)

        except Exception:
            pass

    def load_project(self):
        try:
            if self.project_internal_var.get() == "Android Studio":
                # Для Android Studio нужно выбрать папку, а не файл
                path = filedialog.askdirectory(title=self._tr("Select Project Directory"))
            else:
                # Для Cordova ZIP используем стандартный диалог выбора файла
                path = filedialog.askopenfilename(
                    title=self._tr("Select Project ZIP"),
                    filetypes=[("ZIP files", "*.zip"), ("All files", "*.*")]
                )
            if not path:
                return
            if self.project_internal_var.get() == "Cordova" and path.endswith(".zip"):
                self._load_cordova_zip(path)
            else:
                self._load_project_folder(path)
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _load_cordova_zip(self, zip_path):
        try:
            self.logger.log("Loading Cordova ZIP: {zip}", "INFO", zip=zip_path)
            self._set_progress(5, self._tr("Loading ZIP archive..."))
            archive_name = os.path.splitext(os.path.basename(zip_path))[0]
            target = os.path.join(self.PROJ_DIR, archive_name)
            safe_makedirs(target)
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                total_files = len(zip_ref.namelist())
                extracted_files = 0
                for file in zip_ref.namelist():
                    zip_ref.extract(file, target)
                    extracted_files += 1
                    progress = 5 + (extracted_files / total_files * 10)  # 10% for extraction
                    self._set_progress(progress, self._tr("Extracting ZIP archive... {percent}%", percent=int(extracted_files / total_files * 100)))
            # Fix directory structure if needed
            inner_dirs = [d for d in os.listdir(target) if os.path.isdir(os.path.join(target, d))]
            if len(inner_dirs) == 1 and os.path.exists(os.path.join(target, inner_dirs[0], "config.xml")):
                inner = os.path.join(target, inner_dirs[0])
                for item in os.listdir(inner):
                    shutil.move(os.path.join(inner, item), target)
                shutil.rmtree(inner)
                self.logger.log("Flattening inner directory {inner} → {dir}", "INFO", inner=inner, dir=target)
                self._set_progress(20, self._tr("Preparing project..."))
            self.project_path = target
            if os.path.exists(os.path.join(target, "config.xml")):
                self.project_loaded = True
                self.project_info_var.set(f"{self._tr('Project loaded')}: {target}")
                self.btn_build.configure(state="normal")
                self.logger.log("Cordova project loaded and validated (config.xml found)", "SUCCESS")
                self._set_progress(25, self._tr("Project ready for build"))
            else:
                self.logger.log("Error: {err}", "ERROR", err="config.xml not found in ZIP")
                self.project_loaded = False
                self.project_info_var.set(self._tr("No project loaded"))
                self.btn_build.configure(state="disabled")
                self._set_progress(0, self._tr("Project loading error"))
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            self.project_loaded = False
            self.project_info_var.set(self._tr("No project loaded"))
            self.btn_build.configure(state="disabled")
            self._set_progress(0, self._tr("Project loading error"))
    def _load_project_folder(self, folder):
        try:
            self.project_path = folder
            gradlew = os.path.join(folder, "gradlew.bat" if platform.system() == "Windows" else "gradlew")
            if os.path.exists(gradlew):
                self.project_loaded = True
                self.project_info_var.set(f"{self._tr('Project loaded')}: {folder}")
                self.btn_build.configure(state="normal")
                self.logger.log("Android Studio project loaded and validated (gradlew found)", "SUCCESS")
                self._set_progress(25, self._tr("Project ready for build"))
            else:
                self.logger.log("Error: {err}", "ERROR", err="gradlew not found in folder")
                self.project_loaded = False
                self.project_info_var.set(self._tr("No project loaded"))
                self.btn_build.configure(state="disabled")
                self._set_progress(0, self._tr("Project loading error"))
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            self.project_loaded = False
            self.project_info_var.set(self._tr("No project loaded"))
            self.btn_build.configure(state="disabled")
            self._set_progress(0, self._tr("Project loading error"))


    def check_dependencies(self):
        self.after(0, lambda: self.btn_load.configure(state="disabled"))
        self.logger.log("Checking dependencies...", "INFO")
        self._set_progress(2, self._tr("Checking dependencies..."))
        node_dir = os.path.join(self.DEP_DIR, "node")
        jdk_dir = os.path.join(self.DEP_DIR, "jdk")
        sdk_tools_dir = os.path.join(self.DEP_DIR, "android-sdk", "cmdline-tools", "latest")
        gradle_dir = os.path.join(self.DEP_DIR, "gradle")
        cordova_dir = os.path.join(self.DEP_DIR, "node", "node_modules", "cordova")
        missing = []
        node_exe = os.path.join(node_dir, "node.exe" if platform.system() == "Windows" else "bin/node")
        java_exe = os.path.join(jdk_dir, "bin", "java.exe" if platform.system() == "Windows" else "bin/java")
        sdkmanager_exe = os.path.join(sdk_tools_dir, "bin", "sdkmanager.bat" if platform.system() == "Windows" else "sdkmanager")
        gradle_exe = os.path.join(gradle_dir, "bin", "gradle.bat" if platform.system() == "Windows" else "bin/gradle")
        cordova_exe = os.path.join(cordova_dir, "bin", "cordova")
        if not os.path.exists(node_exe):
            missing.append("Node.js")
        if not os.path.exists(java_exe):
            missing.append("JDK")
        if not os.path.exists(sdkmanager_exe):
            missing.append("Android SDK command-line tools")
        if not os.path.exists(gradle_exe):
            missing.append("Gradle")
        if not os.path.exists(cordova_exe):
            missing.append("Cordova CLI")
        if missing:
            self.logger.log("Missing: {name} ({path})", "WARNING", name=", ".join(missing), path=self.DEP_DIR)
            self.logger.log("Will install: {list}", "INFO", list=", ".join(missing))
            self._install_dependencies(missing)
        else:
            self.logger.log("Found: {name} ({path})", "SUCCESS", name="All dependencies", path=self.DEP_DIR)
            self.dependencies_installed = True
            self._setup_environment()
            self.logger.log("All dependencies installed and environment configured", "SUCCESS")
            self._set_progress(100, self._tr("Ready"))
        self.after(0, lambda: self.btn_load.configure(state="normal" if self.dependencies_installed else "disabled"))
    

    def _install_dependencies(self, missing):
        try:
            total_weight = sum(self.dependency_weights[dep] for dep in missing)
            current_progress = 5
            for dep in missing:
                self.logger.log("Installing dependency: {name}", "INFO", name=dep)
                self._set_progress(current_progress, self._tr("Installing {dep}...", dep=dep))
                if dep == "Node.js":
                    self._install_node(current_progress, self.dependency_weights[dep], total_weight)
                elif dep == "JDK":
                    self._install_jdk(current_progress, self.dependency_weights[dep], total_weight)
                elif dep == "Android SDK command-line tools":
                    self._install_sdk_tools(current_progress, self.dependency_weights[dep], total_weight)
                elif dep == "Gradle":
                    self._install_gradle(current_progress, self.dependency_weights[dep], total_weight)
                elif dep == "Cordova CLI":
                    self._install_cordova(current_progress, self.dependency_weights[dep], total_weight)
                current_progress += self.dependency_weights[dep]
                self._set_progress(current_progress, self._tr("{dep} installed", dep=dep))
            self.dependencies_installed = True
            self._setup_environment()
            self.logger.log("All dependencies installed and environment configured", "SUCCESS")
            self._set_progress(100, self._tr("Ready"))
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            self._set_progress(0, self._tr("Ready"))
    def _install_node(self, start_progress, weight, total_weight):
        try:
            node_url = ("https://nodejs.org/dist/v18.16.0/node-v18.16.0-win-x64.zip" if platform.system() == "Windows" 
                       else "https://nodejs.org/dist/v18.16.0/node-v18.16.0-linux-x64.tar.xz")
            node_dir = os.path.join(self.DEP_DIR, "node")
            self._download_and_extract(node_url, node_dir, "Node.js", start_progress, weight, total_weight)
            self._flatten_dir(node_dir)
            self.logger.log("Installed Node.js: {version}", "SUCCESS", version=self._get_node_version())
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _install_jdk(self, start_progress, weight, total_weight):
        try:
            jdk_url = ("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_x64_windows_hotspot_17.0.2_8.zip" 
                      if platform.system() == "Windows" 
                      else "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_x64_linux_hotspot_17.0.2_8.tar.gz")
            jdk_dir = os.path.join(self.DEP_DIR, "jdk")
            self._download_and_extract(jdk_url, jdk_dir, "JDK", start_progress, weight, total_weight)
            self._flatten_dir(jdk_dir)
            self.logger.log("Installed JDK: {version}", "SUCCESS", version=self._get_jdk_version())
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _install_sdk_tools(self, start_progress, weight, total_weight):
        try:
            sdk_url = ("https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip" 
                      if platform.system() == "Windows" 
                      else "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip")
            sdk_tools_dir = os.path.join(self.DEP_DIR, "android-sdk", "cmdline-tools")
            self._download_and_extract(sdk_url, sdk_tools_dir, "Android SDK command-line tools", start_progress, weight, total_weight)
            self._fix_sdk_structure(sdk_tools_dir)
            sdk_dir = os.path.join(self.DEP_DIR, "android-sdk")
            self._accept_sdk_licenses(sdk_dir, start_progress + weight * 0.3, weight * 0.2, total_weight)
            self._install_sdk_components(sdk_dir, start_progress + weight * 0.5, weight * 0.5, total_weight)
            self.logger.log("Android SDK command-line tools installed to {path}", "SUCCESS", path=sdk_dir)
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _install_gradle(self, start_progress, weight, total_weight):
        try:
            gradle_url = "https://services.gradle.org/distributions/gradle-7.6-bin.zip"
            gradle_dir = os.path.join(self.DEP_DIR, "gradle")
            self._download_and_extract(gradle_url, gradle_dir, "Gradle", start_progress, weight, total_weight)
            self._flatten_dir(gradle_dir)
            self.logger.log("Installed Gradle: {version}", "SUCCESS", version="7.6")
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _install_cordova(self, start_progress, weight, total_weight):
        try:
            self.logger.log("Installing Cordova CLI locally", "INFO")
            self._set_progress(start_progress, self._tr("Installing Cordova CLI locally"))
            
            node_dir = os.path.join(self.DEP_DIR, "node")
            node_exe = os.path.join(node_dir, "node.exe" if platform.system() == "Windows" else "bin/node")
            npm_cli_path = ensure_npm_cli(node_dir, self.logger)
            if not os.path.exists(npm_cli_path):
                raise Exception("npm-cli.js not found even after bootstrap")

            if not os.path.exists(node_exe):
                raise Exception("node.exe not found; cannot install Cordova")
            
            env = self._get_env()
            cmd = [node_exe, npm_cli_path, "install", "cordova@12.0.0", "--no-save"]
            
            # Для установки Cordova используем старый метод без скрытия окна
            self.logger.log("Executing: {cmd}", "DEBUG", cmd=" ".join(cmd))
            shell = platform.system() == "Windows"
            proc = subprocess.Popen(cmd, cwd=node_dir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, 
                                 text=True, env=env, bufsize=1, shell=shell)
            try:
                while True:
                    line = proc.stdout.readline()
                    if not line and proc.poll() is not None:
                        break
                    if line:
                        self.logger.raw(line.rstrip("\n"))
                rc = proc.wait(timeout=600)  # Увеличиваем timeout до 10 минут
            except subprocess.TimeoutExpired:
                try:
                    proc.terminate()
                    proc.wait(timeout=3)
                except Exception:
                    pass
                self.logger.log("Error: {err}", "ERROR", err="Command timeout")
                return
            if rc == 0:
                self.logger.log("Command finished successfully (code {rc})", "SUCCESS", rc=rc)
            else:
                self.logger.log("Command finished with code {rc}", "ERROR", rc=rc)
            
            self._set_progress(start_progress + weight * 0.5, self._tr("Installing Cordova CLI locally"))
            if rc == 0:
                cordova_exe = os.path.join(node_dir, "node_modules", "cordova", "bin", "cordova")
                if os.path.exists(cordova_exe):
                    self.logger.log("Cordova CLI installed: {version}", "SUCCESS", version="12.0.0")
                    self._set_progress(start_progress + weight, self._tr("Cordova CLI installed"))
                else:
                    self.logger.log("Error: {err}", "ERROR", err="Cordova installation failed; binary not found")
            else:
                self.logger.log("Error: {err}", "ERROR", err=f"Cordova installation failed with code {rc}")
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _download_and_extract(self, url, target_dir, description, start_progress, weight, total_weight):
        try:
            self.logger.log("Downloading {description} from {url}", "INFO", description=description, url=url)
            self._set_progress(start_progress, self._tr("Downloading {description}...", description=description))
            response = requests.get(url, stream=True, timeout=30)
            response.raise_for_status()
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            start_time = time.time()
            last_update_time = start_time
            last_downloaded = 0
            ext = url.split('?')[0].split('.')[-1]
            temp_file = os.path.join(self.DEP_DIR, f"temp_{description.replace(' ', '_')}.{ext}")
            
            # Сбрасываем отображение скорости
            self.after(0, lambda: self.download_speed_label.configure(text=self._tr("Speed: --")))
            self.after(0, lambda: self.download_eta_label.configure(text=self._tr("ETA: --")))
            
            with open(temp_file, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        current_time = time.time()
                        
                        # Обновляем скорость каждые 0.5 секунды
                        if current_time - last_update_time >= 0.5:
                            time_diff = current_time - last_update_time
                            downloaded_diff = downloaded - last_downloaded
                            
                            if time_diff > 0 and downloaded_diff > 0:
                                # Вычисляем скорость в МБ/с
                                speed_mbps = (downloaded_diff / time_diff) / (1024 * 1024)
                                speed_text = f"{speed_mbps:.2f} MB/s"
                                
                                # Вычисляем оставшееся время
                                if total_size > 0:
                                    remaining_bytes = total_size - downloaded
                                    eta_seconds = remaining_bytes / (downloaded_diff / time_diff) if downloaded_diff > 0 else 0
                                    eta_text = self._format_time(eta_seconds)
                                else:
                                    eta_text = "--"
                                
                                # Обновляем UI в главном потоке
                                self.after(0, lambda s=speed_text: self.download_speed_label.configure(text=self._tr("Speed: {speed}", speed=s)))
                                self.after(0, lambda e=eta_text: self.download_eta_label.configure(text=self._tr("ETA: {eta}", eta=e)))
                            
                            last_update_time = current_time
                            last_downloaded = downloaded
                        
                        if total_size > 0:
                            download_progress = start_progress + (downloaded / total_size) * (weight * 0.5)
                            percent = int(downloaded / total_size * 100)
                            self._set_progress(download_progress, self._tr("Downloading {description}... {percent}%", description=description, percent=percent))
            
            # Сбрасываем отображение скорости после завершения
            self.after(0, lambda: self.download_speed_label.configure(text=self._tr("Speed: --")))
            self.after(0, lambda: self.download_eta_label.configure(text=self._tr("ETA: --")))
            
            self.logger.log("Downloaded {description} → {path}", "INFO", description=description, path=temp_file)
            self._set_progress(start_progress + weight * 0.5, self._tr("Download completed"))
            self.logger.log("Extracting {description} to {target}...", "INFO", description=description, target=target_dir)
            safe_makedirs(target_dir)
            if temp_file.endswith(('.tar.gz', '.tar.xz', '.tar', '.gz', '.xz')):
                import tarfile
                with tarfile.open(temp_file, 'r:*') as tar_ref:
                    total_files = len(tar_ref.getnames())
                    extracted_files = 0
                    for member in tar_ref.getnames():
                        tar_ref.extract(member, target_dir)
                        extracted_files += 1
                        extract_progress = start_progress + weight * 0.5 + (extracted_files / total_files) * (weight * 0.5)
                        percent = int(extracted_files / total_files * 100)
                        self._set_progress(extract_progress, self._tr("Extracting {description}... {percent}%", description=description, percent=percent))
            else:
                with zipfile.ZipFile(temp_file, 'r') as zip_ref:
                    total_files = len(zip_ref.namelist())
                    extracted_files = 0
                    for file in zip_ref.namelist():
                        zip_ref.extract(file, target_dir)
                        extracted_files += 1
                        extract_progress = start_progress + weight * 0.5 + (extracted_files / total_files) * (weight * 0.5)
                        percent = int(extracted_files / total_files * 100)
                        self._set_progress(extract_progress, self._tr("Extracting {description}... {percent}%", description=description, percent=percent))
            self.logger.log("{description} installed to {target}", "SUCCESS", description=description, target=target_dir)
            self._set_progress(start_progress + weight, self._tr("{description} installed", description=description))
            try:
                os.remove(temp_file)
            except Exception:
                pass
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            raise
    
    def _format_time(self, seconds):
        """Форматирует время в удобочитаемый вид"""
        if seconds < 0:
            return "--"
        elif seconds < 60:
            return f"{int(seconds)}s"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            secs = int(seconds % 60)
            return f"{minutes}m {secs}s"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}h {minutes}m"
    
    def _flatten_dir(self, dir_path):
        try:
            inner_dirs = [d for d in os.listdir(dir_path) if os.path.isdir(os.path.join(dir_path, d))]
            if len(inner_dirs) == 1:
                inner = os.path.join(dir_path, inner_dirs[0])
                for item in os.listdir(inner):
                    src = os.path.join(inner, item)
                    dest = os.path.join(dir_path, item)
                    if os.path.exists(dest):
                        if os.path.isdir(dest):
                            shutil.rmtree(dest)
                        else:
                            os.remove(dest)
                    shutil.move(src, dest)
                shutil.rmtree(inner)
                self.logger.log("Flattening inner directory {inner} → {dir}", "INFO", inner=inner, dir=dir_path)
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _get_node_version(self):
        try:
            node = os.path.join(self.DEP_DIR, "node", "node.exe" if platform.system() == "Windows" else "bin/node")
            if os.path.exists(node):
                out = subprocess.check_output([node, "--version"], text=True, timeout=5, startupinfo=get_hidden_startupinfo())
                return out.strip()
            return "unknown"
        except Exception:
            return "unknown"
    def _get_jdk_version(self):
        try:
            java = os.path.join(self.DEP_DIR, "jdk", "bin", "java.exe" if platform.system() == "Windows" else "bin/java")
            if os.path.exists(java):
                out = subprocess.check_output([java, "-version"], stderr=subprocess.STDOUT, text=True, timeout=5, startupinfo=get_hidden_startupinfo())
                for line in out.splitlines():
                    if "version" in line.lower():
                        return line.strip().split()[1].strip('"')
            return "unknown"
        except Exception:
            return "unknown"
    def _fix_sdk_structure(self, tools_dir):
        try:
            latest = os.path.join(tools_dir, "latest")
            safe_makedirs(latest)
            for item in os.listdir(tools_dir):
                if item == "latest":
                    continue
                p = os.path.join(tools_dir, item)
                if os.path.isdir(p) and "bin" in os.listdir(p):
                    for sub in os.listdir(p):
                        s = os.path.join(p, sub)
                        d = os.path.join(latest, sub)
                        if os.path.exists(d):
                            if os.path.isdir(d):
                                shutil.rmtree(d)
                            else:
                                os.remove(d)
                        shutil.move(s, d)
                    try:
                        shutil.rmtree(p)
                    except Exception:
                        pass
                    self.logger.log("Flattening inner directory {inner} → {dir}", "INFO", inner=p, dir=latest)
                    return
            if "bin" in os.listdir(tools_dir):
                for it in os.listdir(tools_dir):
                    if it == "latest":
                        continue
                    s = os.path.join(tools_dir, it)
                    d = os.path.join(latest, it)
                    if os.path.exists(d):
                        if os.path.isdir(d):
                            shutil.rmtree(d)
                        else:
                            os.remove(d)
                        shutil.move(s, d)
                self.logger.log("Flattening inner directory {inner} → {dir}", "INFO", inner=tools_dir, dir=latest)
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _accept_sdk_licenses(self, sdk_dir, start_progress, weight, total_weight):
        try:
            self.logger.log("Accepting Android SDK licenses (writing license files + interactive sdkmanager)...", "INFO")
            self._set_progress(start_progress, self._tr("Accepting SDK licenses..."))
            licenses_dir = os.path.join(sdk_dir, "licenses")
            safe_makedirs(licenses_dir)
            license_files = {
                "android-sdk-license": "24333f8a63b6825ea9c5514f83c2829b004d1fee",
                "android-sdk-preview-license": "84831b9409646a918e30573b5c9c3cb0",
                "android-googletv-license": "601085b94cd77f0b54ff86406957099ebe79c4d6",
                "uiautomator-license": "8933bad161af4178b1185b1a37fbf41ea5269c11"
            }
            for fname, content in license_files.items():
                p = os.path.join(licenses_dir, fname)
                if not os.path.exists(p):
                    with open(p, "w") as f:
                        f.write(content)
                    self.logger.log("Created license file: {fname}", "DEBUG", fname=fname)
                else:
                    self.logger.log("License file exists: {fname}", "DEBUG", fname=fname)
            sdkmanager = self._get_sdkmanager_path()
            if not os.path.exists(sdkmanager):
                self.logger.log("Warning: {warn}", "WARNING", warn="sdkmanager not found, skipping interactive license acceptance")
                return
            env = self._get_env()
            cmd = [sdkmanager, "--licenses", f"--sdk_root={sdk_dir}"]
            proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, env=env, startupinfo=get_hidden_startupinfo())
            try:
                for _ in range(50):
                    try:
                        proc.stdin.write("y\n")
                        proc.stdin.flush()
                    except Exception:
                        pass
                    time.sleep(0.05)
                while True:
                    line = proc.stdout.readline()
                    if not line and proc.poll() is not None:
                        break
                    if line:
                        self.logger.raw(line.rstrip("\n"))
                rc = proc.wait(timeout=300)
                if rc == 0:
                    self.logger.log("sdkmanager accepted licenses (interactive)", "SUCCESS")
                else:
                    self.logger.log("Warning: {warn}", "WARNING", warn=f"sdkmanager returned {rc}")
                self._set_progress(start_progress + weight, self._tr("Licenses accepted"))
            except Exception as e:
                self.logger.log("Error: {err}", "ERROR", err=str(e))
                self.logger.raw(traceback.format_exc())
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _install_sdk_components(self, sdk_dir, start_progress, weight, total_weight):
        try:
            sdkmanager = self._get_sdkmanager_path()
            if not os.path.exists(sdkmanager):
                raise Exception("sdkmanager not found")
            components = [
                "platform-tools",
                "platforms;android-33",
                "platforms;android-34",
                "build-tools;33.0.2"
            ]
            env = self._get_env()
            total_comps = len(components)
            comp_progress = weight / total_comps if total_comps > 0 else weight
            for i, comp in enumerate(components):
                self.logger.log("Installing Android SDK components (build-tools, platforms, platform-tools)...", "INFO")
                self.logger.log("Installing Android SDK component: {name}", "INFO", name=comp)
                self._set_progress(start_progress + i * comp_progress, self._tr("Installing component: {comp}...", comp=comp))
                cmd = [sdkmanager, "--verbose", comp, f"--sdk_root={sdk_dir}"]
                proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, env=env, startupinfo=get_hidden_startupinfo())
                try:
                    for _ in range(20):
                        try:
                            proc.stdin.write("y\n")
                            proc.stdin.flush()
                        except Exception:
                            pass
                        time.sleep(0.1)
                    while True:
                        line = proc.stdout.readline()
                        if not line and proc.poll() is not None:
                           break
                        if line:
                            self.logger.raw(line.rstrip("\n"))
                    rc = proc.wait(timeout=300)
                    if rc == 0:
                        self.logger.log("{description} installed to {target}", "SUCCESS", description=comp, target=sdk_dir)
                    else:
                        self.logger.log("Warning: {warn}", "WARNING", warn=f"{comp} install returned {rc}")
                    self._set_progress(start_progress + (i + 1) * comp_progress, self._tr("Component {comp} installed", comp=comp))
                except Exception as e:
                    self.logger.log("Error: {err}", "ERROR", err=str(e))
                    self.logger.raw(traceback.format_exc())
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _get_sdkmanager_path(self):
        return os.path.join(self.DEP_DIR, "android-sdk", "cmdline-tools", "latest", "bin", 
                           "sdkmanager.bat" if platform.system() == "Windows" else "sdkmanager")
    def _setup_environment(self):
        try:
            env = os.environ.copy()
            env["JAVA_HOME"] = os.path.join(self.DEP_DIR, "jdk")
            env["ANDROID_HOME"] = os.path.join(self.DEP_DIR, "android-sdk")
            env["ANDROID_SDK_ROOT"] = env["ANDROID_HOME"]
            env["GRADLE_HOME"] = os.path.join(self.DEP_DIR, "gradle")
            parts = [
                os.path.join(env["GRADLE_HOME"], "bin"),
                os.path.join(self.DEP_DIR, "node" if platform.system() == "Windows" else "node/bin"),
                os.path.join(self.DEP_DIR, "node", "node_modules", "cordova", "bin"),
                os.path.join(env["JAVA_HOME"], "bin"),
                os.path.join(env["ANDROID_HOME"], "platform-tools"),
                os.path.join(env["ANDROID_HOME"], "cmdline-tools", "latest", "bin")
            ]
            parts.append(env.get("PATH", ""))
            env["PATH"] = os.pathsep.join(p for p in parts if p)
            self._cached_env = env
            self.logger.log("Environment variables configured:", "DEBUG")
            self.logger.log("  JAVA_HOME: {path}", "DEBUG", path=env["JAVA_HOME"])
            self.logger.log("  ANDROID_HOME: {path}", "DEBUG", path=env["ANDROID_HOME"])
            self.logger.log("  GRADLE_HOME: {path}", "DEBUG", path=env["GRADLE_HOME"])
            self.logger.log("  PATH (prefix): {path}", "DEBUG", path=(env["PATH"][:200] + "..."))
            self.logger.log("Environment setup complete", "SUCCESS")
            return True
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            raise
    def _get_env(self):
        if self._cached_env:
            return self._cached_env
        self._setup_environment()
        return self._cached_env
    def _run_and_capture(self, cmd, cwd=None):
        try:
            env = self._get_env()
            completed = subprocess.run(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, env=env, encoding='utf-8', startupinfo=get_hidden_startupinfo())
            out = completed.stdout or ""
            for line in out.splitlines():
                self.logger.raw(line)
            return out
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            raise
    def _run_and_stream(self, cmd, cwd=None, timeout=3600):
        try:
            cmd_display = " ".join(cmd) if isinstance(cmd, (list, tuple)) else str(cmd)
            self.logger.log("Executing: {cmd}", "DEBUG", cmd=cmd_display)
            env = self._get_env()
            shell = platform.system() == "Windows"
            proc = subprocess.Popen(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, 
                                 text=True, env=env, bufsize=1, shell=shell, startupinfo=get_hidden_startupinfo())
            try:
                while True:
                    line = proc.stdout.readline()
                    if not line and proc.poll() is not None:
                        break
                    if line:
                        self.logger.raw(line.rstrip("\n"))
                rc = proc.wait(timeout=timeout)
            except subprocess.TimeoutExpired:
                try:
                    proc.terminate()
                    proc.wait(timeout=3)
                except Exception:
                    pass
                self.logger.log("Error: {err}", "ERROR", err="Command timeout")
                return -1
            if rc == 0:
                self.logger.log("Command finished successfully (code {rc})", "SUCCESS", rc=rc)
            else:
                self.logger.log("Command finished with code {rc}", "ERROR", rc=rc)
            return rc
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
            return -1
    def start_build(self):
        if not self.project_loaded:
            self._show_message(self._tr("Error"), self._tr("No project loaded"), "error")
            return
        if self.project_internal_var.get() == "Cordova" and not self.dependencies_installed:
            self._show_message(self._tr("Warning"), self._tr("Dependencies are still being installed. Wait or re-run after installation."), "warning")
            return
        mode_internal = self.build_internal_var.get()
        if mode_internal.startswith("Signed"):
            if not self.keystore_info.get("path") or not self.keystore_info.get("alias") or not self.keystore_info.get("storepass"):
                self._show_message(self._tr("Error"), self._tr("No keystore configured for signed build"), "error")
                return
        self.btn_build.configure(state="disabled")
        self._set_progress(0, self._tr("Starting build..."))
        threading.Thread(target=self._build_thread, daemon=True).start()
    def _build_thread(self):
        try:
            mode_internal = self.build_internal_var.get()
            project_type_internal = self.project_internal_var.get()
            self.logger.log("Build started: {mode} for {ptype}", "INFO", mode=mode_internal, ptype=project_type_internal)
            self._set_progress(2, self._tr("Starting build..."))
            if project_type_internal == "Cordova":
                self._build_cordova(mode_internal)
            else:
                self._build_android_studio(mode_internal)
            self.logger.log("Build process completed (thread exit)", "INFO")
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
        finally:
            self.btn_build.configure(state="normal")
            self._set_progress(100, self._tr("Build completed"))
            time.sleep(1)
            self._set_progress(0, self._tr("Ready"))
    def _build_cordova(self, mode_internal):
        self._set_progress(10, self._tr("Starting Cordova build..."))
        node_dir = os.path.join(self.DEP_DIR, "node")
        cordova_exe = os.path.join(node_dir, "node_modules", "cordova", "bin", "cordova")
        if not os.path.exists(cordova_exe):
            raise Exception("Cordova CLI not found in dependencies")
        cordova_cmd = cordova_exe
        self.logger.log("Using Cordova command: {cmd}", "INFO", cmd=cordova_cmd)
        cwd = self.project_path

        # Добавление платформы через Cordova CLI
        platforms_dir = os.path.join(cwd, "platforms")
        android_platform_dir = os.path.join(platforms_dir, "android")
        if not os.path.exists(android_platform_dir):
            self.logger.log("Adding Android platform to Cordova (if missing)...", "INFO")
            self._set_progress(20, self._tr("Adding Android platform..."))
            # Обеспечиваем наличие npm
            npm_cli_path = ensure_npm_cli(node_dir, self.logger)
            if not os.path.exists(npm_cli_path):
                raise Exception("npm-cli.js not found even after bootstrap")
            # Команда cordova platform add
            node_exe = os.path.join(node_dir, "node.exe" if platform.system() == "Windows" else "bin/node")
            add_cmd = [node_exe, cordova_cmd, "platform", "add", "android@12.0.0", "--no-telemetry"]
            rc_add = self._run_and_stream(add_cmd, cwd=cwd)
            if rc_add != 0:
                raise Exception(f"Cordova platform add failed with code {rc_add}")
            self._set_progress(30, self._tr("Android platform added"))
        else:
            self.logger.log("Android platform already exists", "INFO")
            self._set_progress(30, self._tr("Android platform already added"))

        try:
            self._apply_cordova_patches(cwd)
            self._set_progress(35, self._tr("Applying patches..."))
        except Exception as e:
            self.logger.log("Warning: {warn}", "WARNING", warn=str(e))
        # Сборка через Cordova CLI
        node_exe = os.path.join(node_dir, "node.exe" if platform.system() == "Windows" else "bin/node")
        cmd = [node_exe, cordova_cmd, "build", "android", "--no-telemetry"]
        if mode_internal == "Debug APK":
            cmd.append("--debug")
        elif mode_internal == "Unsigned Release APK":
            cmd.append("--release")
        elif mode_internal == "Unsigned AAB":
            cmd.extend(["--release", "--", "--packageType=bundle"])
        else:
            cmd.append("--release")
        self.logger.log("Running Cordova build: {cmd}", "INFO", cmd=" ".join(cmd))
        self._set_progress(40, self._tr("Build: {mode_internal}...", mode_internal=mode_internal))
        rc = self._run_and_stream(cmd, cwd=cwd)
        self._set_progress(70, self._tr("Build completed"))
        if rc != 0:
            raise Exception(f"Cordova build failed with code {rc}")
        artifacts = self._find_artifacts_cordova(cwd)
        self.logger.log("Found build artifacts: {paths}", "INFO", paths=", ".join(artifacts) if artifacts else "(none)")
        self._set_progress(80, self._tr("Artifacts found"))
        if any(mode_internal.startswith(s) for s in ("Signed",)):
            if not self.keystore_info.get("path"):
                raise Exception("Keystore not configured for signed build")
            self._sign_and_align(artifacts)
            self._set_progress(95, self._tr("Signing completed"))
        else:
            if artifacts:
                p = artifacts[0]
                try:
                    size = human_size(os.path.getsize(p))
                except Exception:
                    size = "?"
                self.logger.log("Artifact ready: {path} (size {size})", "SUCCESS", path=p, size=size)
                self._open_artifact_folder(p)
        self._set_progress(100, self._tr("Build completed successfully"))
    def _apply_cordova_patches(self, project_dir):
        try:
            cordova_gradle = os.path.join(project_dir, "platforms", "android", "CordovaLib", "cordova.gradle")
            if os.path.exists(cordova_gradle):
                with open(cordova_gradle, "r", encoding="utf-8", errors="ignore") as f:
                    content = f.read()
                if "import groovy.xml.XmlParser" not in content:
                    new = "import groovy.xml.XmlParser\n" + content
                    with open(cordova_gradle, "w", encoding="utf-8") as f:
                        f.write(new)
                    self.logger.log("Added import groovy.xml.XmlParser to cordova.gradle", "SUCCESS")
                else:
                    self.logger.log("cordova.gradle already patched", "DEBUG")
            else:
                self.logger.log("cordova.gradle not found, skipping patch", "DEBUG")
        except Exception as e:
            self.logger.log("Warning: {warn}", "WARNING", warn=str(e))
    def _find_artifacts_cordova(self, project_dir):
        out = []
        base = os.path.join(project_dir, "platforms", "android")
        if not os.path.exists(base):
            base = project_dir
        for root, _, files in os.walk(base):
            for f in files:
                if f.endswith((".apk", ".aab")):
                    out.append(os.path.join(root, f))
        return out
    def _build_android_studio(self, mode_internal):
        self._set_progress(10, self._tr("Starting Android Studio build..."))
        gradlew = "gradlew.bat" if platform.system() == "Windows" else "./gradlew"
        cwd = self.project_path
        gradlew_path = os.path.join(cwd, gradlew)
        if not os.path.exists(gradlew_path):
            raise Exception("gradlew not found in project root")
        if mode_internal == "Debug APK":
            cmd = [gradlew, "assembleDebug"]
        elif mode_internal == "Unsigned Release APK":
            cmd = [gradlew, "assembleRelease"]
        elif mode_internal == "Unsigned AAB":
            cmd = [gradlew, "bundleRelease"]
        else:
            cmd = [gradlew, "assembleRelease"]
        self.logger.log("Running gradle command: {cmd}", "INFO", cmd=" ".join(cmd))
        self._set_progress(20, self._tr("Build: {mode_internal}...", mode_internal=mode_internal))
        rc = self._run_and_stream(cmd, cwd=cwd)
        self._set_progress(70, self._tr("Build completed"))
        if rc != 0:
            raise Exception(f"Gradle build failed with code {rc}")
        artifacts = []
        for root, _, files in os.walk(cwd):
            for f in files:
                if f.endswith((".apk", ".aab")):
                    artifacts.append(os.path.join(root, f))
        self.logger.log("Found build artifacts: {paths}", "INFO", paths=", ".join(artifacts) if artifacts else "(none)")
        self._set_progress(80, self._tr("Artifacts found"))
        if any(mode_internal.startswith(s) for s in ("Signed",)):
            if not self.keystore_info.get("path"):
                raise Exception("Keystore not configured for signed build")
            self._sign_and_align(artifacts)
            self._set_progress(95, self._tr("Signing completed"))
        else:
            if artifacts:
                p = artifacts[0]
                try:
                    size = human_size(os.path.getsize(p))
                except Exception:
                    size = "?"
                self.logger.log("Artifact ready: {path} (size {size})", "SUCCESS", path=p, size=size)
                self._open_artifact_folder(p)
        self._set_progress(100, self._tr("Build completed successfully"))
    def _sign_and_align(self, artifacts):
        for art in artifacts:
            if art.endswith(".apk"):
                self._sign_apk(art)
            elif art.endswith(".aab"):
                self._sign_aab(art)
    def _sign_apk(self, apk):
        try:
            self.logger.log("Signing APK: {path}", "INFO", path=apk)
            basename = os.path.basename(apk)
            self._set_progress(self.current_progress, self._tr("Signing APK: {basename}...", basename=basename))
            buildtools = os.path.join(self.DEP_DIR, "android-sdk", "build-tools", "33.0.2")
            zipalign = os.path.join(buildtools, "zipalign.exe" if platform.system() == "Windows" else "zipalign")
            apksigner = os.path.join(buildtools, "apksigner.bat" if platform.system() == "Windows" else "apksigner")
            src = apk
            if os.path.exists(zipalign):
                aligned = apk.replace(".apk", ".aligned.apk")
                rc = self._run_and_stream([zipalign, "-p", "4", src, aligned])
                if rc == 0:
                    src = aligned
                    self.logger.log("Debug: {msg}", "DEBUG", msg=f"zipalign created {aligned}")
                else:
                    self.logger.log("Warning: {warn}", "WARNING", warn="zipalign failed; continuing with original apk")
            else:
                self.logger.log("Warning: {warn}", "WARNING", warn="zipalign not found")
            if not os.path.exists(apksigner):
                self.logger.log("Error: {err}", "ERROR", err="apksigner not found")
                return
            ks = self.keystore_info
            cmd = [
                apksigner, "sign",
                "--ks", ks["path"],
                "--ks-pass", f"pass:{ks['storepass']}",
                "--ks-key-alias", ks["alias"],
                "--key-pass", f"pass:{ks['keypass']}",
                src
            ]
            rc = self._run_and_stream(cmd)
            if rc == 0:
                self.logger.log("APK signed: {path}", "SUCCESS", path=src)
                self._open_artifact_folder(src)
            else:
                self.logger.log("Error: {err}", "ERROR", err=f"apksigner returned {rc}")
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _sign_aab(self, aab):
        try:
            self.logger.log("Signing AAB: {path}", "INFO", path=aab)
            basename = os.path.basename(aab)
            self._set_progress(self.current_progress, self._tr("Signing AAB: {basename}...", basename=basename))
            jarsigner = os.path.join(self.DEP_DIR, "jdk", "bin", "jarsigner.exe" if platform.system() == "Windows" else "jarsigner")
            if not os.path.exists(jarsigner):
                self.logger.log("Error: {err}", "ERROR", err="jarsigner not found")
                return
            ks = self.keystore_info
            cmd = [
                jarsigner, "-verbose",
                "-keystore", ks["path"],
                "-storepass", ks["storepass"],
                "-keypass", ks["keypass"],
                aab, ks["alias"]
            ]
            rc = self._run_and_stream(cmd)
            if rc == 0:
                self.logger.log("AAB signed with jarsigner: {path}", "SUCCESS", path=aab)
                self._open_artifact_folder(aab)
            else:
                self.logger.log("Error: {err}", "ERROR", err=f"jarsigner returned {rc}")
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())
    def _open_artifact_folder(self, path):
        try:
            folder = os.path.dirname(path)
            if platform.system() == "Windows":
                os.startfile(folder)
            elif platform.system() == "Darwin":
                subprocess.Popen(["open", folder], startupinfo=get_hidden_startupinfo())
            else:
                subprocess.Popen(["xdg-open", folder], startupinfo=get_hidden_startupinfo())
            self.logger.log("Opening folder: {folder}", "INFO", folder=folder)
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
    def _open_dependencies(self):
        self._open_artifact_folder(self.DEP_DIR)
    def _open_logs_dir(self):
        self._open_artifact_folder(self.LOGS_DIR)

    def _delete_project_folders(self):
        """Удаляет все папки проектов"""
        try:
            result = messagebox.askyesno(
                self._tr("Confirm Delete"), 
                self._tr("This will delete all project folders. Continue?")
            )
            if not result:
                return
                
            if os.path.exists(self.PROJ_DIR):
                shutil.rmtree(self.PROJ_DIR)
                safe_makedirs(self.PROJ_DIR)
                self.logger.log("Deleted all project folders: {path}", "SUCCESS", path=self.PROJ_DIR)
                self.project_loaded = False
                self.project_info_var.set(self._tr("No project loaded"))
                self.btn_build.configure(state="disabled")
            else:
                self.logger.log("No project folders to delete", "INFO")
        except Exception as e:
            self.logger.log("Error: {err}", "ERROR", err=str(e))
            self.logger.raw(traceback.format_exc())















    def _on_closing(self):
        kill_processes_by_name("java")
        kill_processes_by_name("node")
        kill_processes_by_name("gradle")
        try:
            self.destroy()
        except Exception:
            pass

class WelcomeDialog(ctk.CTkToplevel):
    def __init__(self, parent, callback):
        super().__init__(parent)
        self.callback = callback
        self.result = None
        
        # Настройка окна
        self.title("Welcome to Saturn Builder")
        self.geometry("650x650")
        self.resizable(False, False)
        self.protocol("WM_DELETE_WINDOW", self.on_close)
        
        # Центрируем окно
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (650 // 2)
        y = (self.winfo_screenheight() // 2) - (650 // 2)
        self.geometry(f"650x650+{x}+{y}")
        
        # Создаем интерфейс
        self._build_ui()
        
        # Делаем окно модальным
        self.transient(parent)
        self.grab_set()
        self.focus_set()
        
        # Set icon AFTER all widgets are created to prevent interference
        set_window_icon(self)
        
    def _build_ui(self):
        # Основной контейнер
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Заголовок
        title_label = ctk.CTkLabel(
            main_frame, 
            text="Welcome to Saturn Builder", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=(15, 8))
        
        # Подзаголовок
        subtitle_label = ctk.CTkLabel(
            main_frame, 
            text="Your complete solution for building Android applications",
            font=ctk.CTkFont(size=14),
            text_color="gray"
        )
        subtitle_label.pack(pady=(0, 20))
        
        # Место для изображения
        image_frame = ctk.CTkFrame(main_frame, height=120, fg_color="transparent")
        image_frame.pack(fill="x", padx=50, pady=(0, 20))
        image_frame.pack_propagate(False)
        
        # Загружаем и отображаем иконку из BASE64
        try:
            if Image and ImageTk:
                # Загружаем изображение из встроенной BASE64 строки
                import base64
                import io
                
                # Декодируем BASE64 и создаем изображение
                icon_data = base64.b64decode(base64_string.strip())
                img = Image.open(io.BytesIO(icon_data))
                
                # Изменяем размер для отображения (примерно 100x100)
                img = img.resize((100, 100), Image.Resampling.LANCZOS)
                # Конвертируем для tkinter
                photo = ImageTk.PhotoImage(img)
                
                # Создаем label с изображением
                image_label = ctk.CTkLabel(
                    image_frame,
                    image=photo,
                    text=""
                )
                image_label.image = photo  # Сохраняем ссылку
                image_label.pack(expand=True)
            else:
                # Если PIL не установлен, показываем заглушку
                image_placeholder = ctk.CTkLabel(
                    image_frame,
                    text="[PIL not available]\n\nCannot load icon",
                    font=ctk.CTkFont(size=12),
                    text_color="gray"
                )
                image_placeholder.pack(expand=True)
        except Exception as e:
            # В случае ошибки показываем заглушку
            image_placeholder = ctk.CTkLabel(
                image_frame,
                text=f"[Error loading icon]\n\n{str(e)}",
                font=ctk.CTkFont(size=12),
                text_color="gray"
            )
            image_placeholder.pack(expand=True)
        
        # Информация о зависимостях
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="Dependencies Installation Required",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        info_label.pack(pady=(12, 8))
        
        deps_text = """Saturn Builder requires several dependencies to function properly:

• Node.js (JavaScript runtime)
• JDK 17 (Java Development Kit)
• Android SDK (Android development tools)
• Gradle (Build system)
• Cordova CLI (Mobile app framework)

Total download size: ~1GB

These dependencies will be downloaded and installed automatically to the 'dependencies' folder in the application directory."""
        
        deps_label = ctk.CTkLabel(
            info_frame,
            text=deps_text,
            font=ctk.CTkFont(size=12),
            justify="left",
            wraplength=500
        )
        deps_label.pack(padx=20, pady=(0, 12))
        
        # Кнопки
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Кнопка "Install Dependencies"
        install_btn = ctk.CTkButton(
            button_frame,
            text="Install Dependencies",
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#2ecc71",
            hover_color="#27ae60",
            height=35,
            command=self.install_dependencies
        )
        install_btn.pack(side="left", padx=(0, 10), expand=True)
        
        # Кнопка "Skip for Now"
        skip_btn = ctk.CTkButton(
            button_frame,
            text="Skip for Now",
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            border_width=2,
            border_color="#666",
            height=35,
            command=self.skip_installation
        )
        skip_btn.pack(side="left", padx=(10, 0), expand=True)
        
    def install_dependencies(self):
        self.result = "install"
        self.destroy()
        if self.callback:
            self.callback("install")
            
    def skip_installation(self):
        self.result = "skip"
        self.destroy()
        if self.callback:
            self.callback("skip")
            
    def on_close(self):
        self.result = "skip"
        self.destroy()
        if self.callback:
            self.callback("skip")

class SkipDependenciesDialog(ctk.CTkToplevel):
    def __init__(self, parent):
        super().__init__(parent)
        
        # Настройка окна
        self.title("Dependencies Not Installed")
        self.geometry("500x300")
        self.resizable(False, False)
        
        # Центрируем окно
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.winfo_screenheight() // 2) - (300 // 2)
        self.geometry(f"500x300+{x}+{y}")
        # Создаем интерфейс
        self._build_ui()
        
        # Делаем окно модальным
        self.transient(parent)
        self.grab_set()
        self.focus_set()
        
        # Set icon AFTER all widgets are created to prevent interference
        set_window_icon(self)
        
    def _build_ui(self):
        # Основной контейнер
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Иконка предупреждения
        warning_label = ctk.CTkLabel(
            main_frame,
            text="⚠️",
            font=ctk.CTkFont(size=48)
        )
        warning_label.pack(pady=(20, 10))
        
        # Заголовок
        title_label = ctk.CTkLabel(
            main_frame,
            text="Dependencies Not Installed",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=(0, 15))
        
        # Сообщение
        message_text = """You can install dependencies later by clicking the "re-check deps" button in the Manual Actions section.

Without dependencies, you won't be able to build projects, but you can still explore the application interface."""
        
        message_label = ctk.CTkLabel(
            main_frame,
            text=message_text,
            font=ctk.CTkFont(size=12),
            justify="left",
            wraplength=400
        )
        message_label.pack(padx=20, pady=(0, 20))
        
        # Кнопка OK
        ok_btn = ctk.CTkButton(
            main_frame,
            text="OK",
            font=ctk.CTkFont(size=14, weight="bold"),
            width=120,
            height=35,
            command=self.destroy
        )
        ok_btn.pack(pady=(0, 20))

def set_window_icon(window):
    """Helper function to set icon for customtkinter windows using BASE64"""
    try:
        # Метод 1: Создание временного файла из BASE64 (основной метод для иконки окна)
        try:
            import base64
            import io
            import tempfile
            
            # Декодируем BASE64 и создаем временный файл
            icon_data = base64.b64decode(base64_string.strip())
            
            # Создаем временный файл
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ico') as temp_file:
                temp_file.write(icon_data)
                temp_icon_path = temp_file.name
            
            # Устанавливаем иконку окна из временного файла
            window.iconbitmap(temp_icon_path)
            print("Successfully set window icon using temporary file from BASE64")
            
            # Store the temp file path for cleanup
            window._temp_icon_path = temp_icon_path
            
            # Cleanup function
            def cleanup_temp_file():
                try:
                    if hasattr(window, '_temp_icon_path') and os.path.exists(window._temp_icon_path):
                        os.unlink(window._temp_icon_path)
                        print(f"Cleaned up temp icon file: {window._temp_icon_path}")
                except Exception as e:
                    print(f"Cleanup failed: {e}")
            
            # Cleanup when window is destroyed
            window.protocol("WM_DELETE_WINDOW", lambda: [cleanup_temp_file(), window.destroy()])
            
            return True
            
        except Exception as e1:
            print(f"Temporary file method failed: {e1}")
        
        # Метод 2: PIL с BASE64 (fallback)
        try:
            if Image and ImageTk:
                import base64
                import io
                
                # Декодируем BASE64 и создаем изображение
                icon_data = base64.b64decode(base64_string.strip())
                img = Image.open(io.BytesIO(icon_data))
                
                # Создаем PhotoImage для иконки окна
                photo = ImageTk.PhotoImage(img)
                window.iconphoto(True, photo)
                print("Successfully set window icon using PIL with BASE64")
                
                # Store the photo reference to prevent garbage collection
                window._icon_photo = photo
                
                return True
            else:
                print("PIL not available")
        except Exception as e2:
            print(f"PIL with BASE64 failed: {e2}")
        
        return False
        
    except Exception as e:
        print(f"Error in set_window_icon: {e}")
        return False

def main():
    # Обеспечиваем наличие ICO файла
    ensure_ico_exists()
    
    # Проверяем наличие иконки
    check_icon_file()
    
    app = MainApp()
    try:
        app.mainloop()
    except Exception as e:
        print(f"Application error: {e}")
        sys.exit(1)
if __name__ == "__main__":
    main()
